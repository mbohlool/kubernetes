// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	spec "github.com/go-openapi/spec"
	resource "k8s.io/kubernetes/pkg/api/resource"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ APIVersion) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "An APIVersion represents a single concrete version of an object model."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of this version (e.g. 'v1').",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ CPUTargetUtilization) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"targetPercentage": {
			SchemaProps: spec.SchemaProps{
				Description: "fraction of the requested CPU that should be utilized/used, e.g. 70 means that 70% of the requested CPU should be in use.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"targetPercentage"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ CustomMetricCurrentStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Custom Metric name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
			},
		},
	}
	schema.Required = []string{"name", "value"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ CustomMetricCurrentStatusList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.CustomMetricCurrentStatus"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.CustomMetricCurrentStatus": CustomMetricCurrentStatus{},
		},
	}
}

func (_ CustomMetricTarget) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Alpha-level support for Custom Metrics in HPA (as annotations)."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Custom Metric name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
			},
		},
	}
	schema.Required = []string{"name", "value"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ CustomMetricTargetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.CustomMetricTarget"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.CustomMetricTarget": CustomMetricTarget{},
		},
	}
}

func (_ DaemonSet) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSet represents the configuration of a daemon set."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.DaemonSetSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.DaemonSetStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":           v1.ObjectMeta{},
			"v1beta1.DaemonSetSpec":   DaemonSetSpec{},
			"v1beta1.DaemonSetStatus": DaemonSetStatus{},
		},
	}
}

func (_ DaemonSetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSetList is a collection of daemon sets."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of daemon sets.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.DaemonSet"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1beta1.DaemonSet":    DaemonSet{},
		},
	}
}

func (_ DaemonSetSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSetSpec is the specification of a daemon set."
	schema.Properties = map[string]spec.Schema{
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodTemplateSpec"),
			},
		},
	}
	schema.Required = []string{"template"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodTemplateSpec":    v1.PodTemplateSpec{},
			"v1beta1.LabelSelector": LabelSelector{},
		},
	}
}

func (_ DaemonSetStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSetStatus represents the current status of a daemon set."
	schema.Properties = map[string]spec.Schema{
		"currentNumberScheduled": {
			SchemaProps: spec.SchemaProps{
				Description: "CurrentNumberScheduled is the number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"numberMisscheduled": {
			SchemaProps: spec.SchemaProps{
				Description: "NumberMisscheduled is the number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"desiredNumberScheduled": {
			SchemaProps: spec.SchemaProps{
				Description: "DesiredNumberScheduled is the total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"currentNumberScheduled", "numberMisscheduled", "desiredNumberScheduled"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Deployment) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Deployment enables declarative updates for Pods and ReplicaSets."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.DeploymentSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.DeploymentStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":            v1.ObjectMeta{},
			"v1beta1.DeploymentSpec":   DeploymentSpec{},
			"v1beta1.DeploymentStatus": DeploymentStatus{},
		},
	}
}

func (_ DeploymentList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeploymentList is a list of Deployments."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of Deployments.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.Deployment"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1beta1.Deployment":   Deployment{},
		},
	}
}

func (_ DeploymentRollback) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeploymentRollback stores the information required to rollback a deployment."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: This must match the Name of a deployment.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"updatedAnnotations": {
			SchemaProps: spec.SchemaProps{
				Description: "The annotations to be updated to a deployment",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"rollbackTo": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.RollbackConfig"),
			},
		},
	}
	schema.Required = []string{"name", "rollbackTo"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.RollbackConfig": RollbackConfig{},
		},
	}
}

func (_ DeploymentSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeploymentSpec is the specification of the desired behavior of the Deployment."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodTemplateSpec"),
			},
		},
		"strategy": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.DeploymentStrategy"),
			},
		},
		"minReadySeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"revisionHistoryLimit": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"paused": {
			SchemaProps: spec.SchemaProps{
				Description: "Indicates that the deployment is paused and will not be processed by the deployment controller.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"rollbackTo": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.RollbackConfig"),
			},
		},
	}
	schema.Required = []string{"template"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodTemplateSpec":         v1.PodTemplateSpec{},
			"v1beta1.DeploymentStrategy": DeploymentStrategy{},
			"v1beta1.LabelSelector":      LabelSelector{},
			"v1beta1.RollbackConfig":     RollbackConfig{},
		},
	}
}

func (_ DeploymentStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeploymentStatus is the most recently observed status of the Deployment."
	schema.Properties = map[string]spec.Schema{
		"observedGeneration": {
			SchemaProps: spec.SchemaProps{
				Description: "The generation observed by the deployment controller.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"updatedReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"availableReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"unavailableReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of unavailable pods targeted by this deployment.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ DeploymentStrategy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeploymentStrategy describes how to replace existing pods with new ones."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"rollingUpdate": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.RollingUpdateDeployment"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.RollingUpdateDeployment": RollingUpdateDeployment{},
		},
	}
}

func (_ ExportOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ExportOptions is the query options to the standard REST get call."
	schema.Properties = map[string]spec.Schema{
		"export": {
			SchemaProps: spec.SchemaProps{
				Description: "Should this value be exported.  Export strips fields that a user can not specify.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"exact": {
			SchemaProps: spec.SchemaProps{
				Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"export", "exact"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ FSGroupStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "FSGroupStrategyOptions defines the strategy type and options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ranges": {
			SchemaProps: spec.SchemaProps{
				Description: "Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.IDRange"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.IDRange": IDRange{},
		},
	}
}

func (_ HTTPIngressPath) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is a extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"backend": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.IngressBackend"),
			},
		},
	}
	schema.Required = []string{"backend"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.IngressBackend": IngressBackend{},
		},
	}
}

func (_ HTTPIngressRuleValue) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'."
	schema.Properties = map[string]spec.Schema{
		"paths": {
			SchemaProps: spec.SchemaProps{
				Description: "A collection of paths that map requests to backends.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.HTTPIngressPath"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"paths"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.HTTPIngressPath": HTTPIngressPath{},
		},
	}
}

func (_ HorizontalPodAutoscaler) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "configuration of a horizontal pod autoscaler."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.HorizontalPodAutoscalerSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.HorizontalPodAutoscalerStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                         v1.ObjectMeta{},
			"v1beta1.HorizontalPodAutoscalerSpec":   HorizontalPodAutoscalerSpec{},
			"v1beta1.HorizontalPodAutoscalerStatus": HorizontalPodAutoscalerStatus{},
		},
	}
}

func (_ HorizontalPodAutoscalerList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "list of horizontal pod autoscaler objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "list of horizontal pod autoscaler objects.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.HorizontalPodAutoscaler"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":            unversioned.ListMeta{},
			"v1beta1.HorizontalPodAutoscaler": HorizontalPodAutoscaler{},
		},
	}
}

func (_ HorizontalPodAutoscalerSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "specification of a horizontal pod autoscaler."
	schema.Properties = map[string]spec.Schema{
		"scaleRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SubresourceReference"),
			},
		},
		"minReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "lower limit for the number of pods that can be set by the autoscaler, default 1.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"maxReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"cpuUtilization": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.CPUTargetUtilization"),
			},
		},
	}
	schema.Required = []string{"scaleRef", "maxReplicas"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.CPUTargetUtilization": CPUTargetUtilization{},
			"v1beta1.SubresourceReference": SubresourceReference{},
		},
	}
}

func (_ HorizontalPodAutoscalerStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "current status of a horizontal pod autoscaler"
	schema.Properties = map[string]spec.Schema{
		"observedGeneration": {
			SchemaProps: spec.SchemaProps{
				Description: "most recent generation observed by this autoscaler.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"lastScaleTime": {
			SchemaProps: spec.SchemaProps{
				Description: "last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"currentReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "current number of replicas of pods managed by this autoscaler.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"desiredReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "desired number of replicas of pods managed by this autoscaler.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"currentCPUUtilizationPercentage": {
			SchemaProps: spec.SchemaProps{
				Description: "current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"currentReplicas", "desiredReplicas"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ HostPortRange) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Host Port Range defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined."
	schema.Properties = map[string]spec.Schema{
		"min": {
			SchemaProps: spec.SchemaProps{
				Description: "min is the start of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"max": {
			SchemaProps: spec.SchemaProps{
				Description: "max is the end of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"min", "max"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ IDRange) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ID Range provides a min/max of an allowed range of IDs."
	schema.Properties = map[string]spec.Schema{
		"min": {
			SchemaProps: spec.SchemaProps{
				Description: "Min is the start of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"max": {
			SchemaProps: spec.SchemaProps{
				Description: "Max is the end of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"min", "max"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Ingress) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.IngressSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.IngressStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":         v1.ObjectMeta{},
			"v1beta1.IngressSpec":   IngressSpec{},
			"v1beta1.IngressStatus": IngressStatus{},
		},
	}
}

func (_ IngressBackend) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressBackend describes all endpoints for a given service and port."
	schema.Properties = map[string]spec.Schema{
		"serviceName": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies the name of the referenced service.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"servicePort": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies the port of the referenced service.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	schema.Required = []string{"serviceName", "servicePort"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ IngressList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressList is a collection of Ingress."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of Ingress.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.Ingress"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1beta1.Ingress":      Ingress{},
		},
	}
}

func (_ IngressRule) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue."
	schema.Properties = map[string]spec.Schema{
		"host": {
			SchemaProps: spec.SchemaProps{
				Description: "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ IngressRuleValue) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set."
	schema.Properties = map[string]spec.Schema{
		"http": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.HTTPIngressRuleValue"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.HTTPIngressRuleValue": HTTPIngressRuleValue{},
		},
	}
}

func (_ IngressSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressSpec describes the Ingress the user wishes to exist."
	schema.Properties = map[string]spec.Schema{
		"backend": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.IngressBackend"),
			},
		},
		"tls": {
			SchemaProps: spec.SchemaProps{
				Description: "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.IngressTLS"),
						},
					},
				},
			},
		},
		"rules": {
			SchemaProps: spec.SchemaProps{
				Description: "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.IngressRule"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.IngressBackend": IngressBackend{},
			"v1beta1.IngressRule":    IngressRule{},
			"v1beta1.IngressTLS":     IngressTLS{},
		},
	}
}

func (_ IngressStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressStatus describe the current state of the Ingress."
	schema.Properties = map[string]spec.Schema{
		"loadBalancer": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.LoadBalancerStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LoadBalancerStatus": v1.LoadBalancerStatus{},
		},
	}
}

func (_ IngressTLS) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressTLS describes the transport layer security associated with an Ingress."
	schema.Properties = map[string]spec.Schema{
		"hosts": {
			SchemaProps: spec.SchemaProps{
				Description: "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"secretName": {
			SchemaProps: spec.SchemaProps{
				Description: "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Job) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Job represents the configuration of a single job."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.JobSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.JobStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":     v1.ObjectMeta{},
			"v1beta1.JobSpec":   JobSpec{},
			"v1beta1.JobStatus": JobStatus{},
		},
	}
}

func (_ JobCondition) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "JobCondition describes current state of a job."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of job condition, Complete or Failed.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Description: "Status of the condition, one of True, False, Unknown.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"lastProbeTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Last time the condition was checked.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"lastTransitionTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Last time the condition transit from one status to another.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "(brief) reason for the condition's last transition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Human readable message indicating details about last transition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"type", "status"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ JobList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "JobList is a collection of jobs."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of Job.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.Job"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1beta1.Job":          Job{},
		},
	}
}

func (_ JobSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "JobSpec describes how the job execution will look like."
	schema.Properties = map[string]spec.Schema{
		"parallelism": {
			SchemaProps: spec.SchemaProps{
				Description: "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"completions": {
			SchemaProps: spec.SchemaProps{
				Description: "Completions specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"activeDeadlineSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
		"autoSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "AutoSelector controls generation of pod labels and pod selectors. It was not present in the original extensions/v1beta1 Job definition, but exists to allow conversion from batch/v1 Jobs, where it corresponds to, but has the opposite meaning as, ManualSelector. More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodTemplateSpec"),
			},
		},
	}
	schema.Required = []string{"template"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodTemplateSpec":    v1.PodTemplateSpec{},
			"v1beta1.LabelSelector": LabelSelector{},
		},
	}
}

func (_ JobStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "JobStatus represents the current state of a Job."
	schema.Properties = map[string]spec.Schema{
		"conditions": {
			SchemaProps: spec.SchemaProps{
				Description: "Conditions represent the latest available observations of an object's current state. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.JobCondition"),
						},
					},
				},
			},
		},
		"startTime": {
			SchemaProps: spec.SchemaProps{
				Description: "StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"completionTime": {
			SchemaProps: spec.SchemaProps{
				Description: "CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"active": {
			SchemaProps: spec.SchemaProps{
				Description: "Active is the number of actively running pods.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"succeeded": {
			SchemaProps: spec.SchemaProps{
				Description: "Succeeded is the number of pods which reached Phase Succeeded.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"failed": {
			SchemaProps: spec.SchemaProps{
				Description: "Failed is the number of pods which reached Phase Failed.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.JobCondition": JobCondition{},
		},
	}
}

func (_ LabelSelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects."
	schema.Properties = map[string]spec.Schema{
		"matchLabels": {
			SchemaProps: spec.SchemaProps{
				Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"matchExpressions": {
			SchemaProps: spec.SchemaProps{
				Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelectorRequirement"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.LabelSelectorRequirement": LabelSelectorRequirement{},
		},
	}
}

func (_ LabelSelectorRequirement) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "key is the label key that the selector applies to.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"operator": {
			SchemaProps: spec.SchemaProps{
				Description: "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"values": {
			SchemaProps: spec.SchemaProps{
				Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"key", "operator"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ListOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ListOptions is the query options to a standard REST list call."
	schema.Properties = map[string]spec.Schema{
		"labelSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fieldSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"watch": {
			SchemaProps: spec.SchemaProps{
				Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"resourceVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"timeoutSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Timeout for the list/watch call.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NetworkPolicy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.NetworkPolicySpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":             v1.ObjectMeta{},
			"v1beta1.NetworkPolicySpec": NetworkPolicySpec{},
		},
	}
}

func (_ NetworkPolicyIngressRule) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from."
	schema.Properties = map[string]spec.Schema{
		"ports": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is not provided, this rule matches all ports (traffic not restricted by port). If this field is empty, this rule matches no ports (no traffic matches). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.NetworkPolicyPort"),
						},
					},
				},
			},
		},
		"from": {
			SchemaProps: spec.SchemaProps{
				Description: "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is not provided, this rule matches all sources (traffic not restricted by source). If this field is empty, this rule matches no sources (no traffic matches). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.NetworkPolicyPeer"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.NetworkPolicyPeer": NetworkPolicyPeer{},
			"v1beta1.NetworkPolicyPort": NetworkPolicyPort{},
		},
	}
}

func (_ NetworkPolicyList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Network Policy List is a list of NetworkPolicy objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of schema objects.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.NetworkPolicy"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":  unversioned.ListMeta{},
			"v1beta1.NetworkPolicy": NetworkPolicy{},
		},
	}
}

func (_ NetworkPolicyPeer) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"podSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
		"namespaceSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.LabelSelector": LabelSelector{},
		},
	}
}

func (_ NetworkPolicyPort) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"protocol": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"port": {
			SchemaProps: spec.SchemaProps{
				Description: "If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NetworkPolicySpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"podSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
		"ingress": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if namespace.networkPolicy.ingress.isolation is undefined and cluster policy allows it, OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not affect ingress isolation. If this field is present and contains at least one rule, this policy allows any traffic which matches at least one of the ingress rules in this list.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.NetworkPolicyIngressRule"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"podSelector"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.LabelSelector":            LabelSelector{},
			"v1beta1.NetworkPolicyIngressRule": NetworkPolicyIngressRule{},
		},
	}
}

func (_ PodSecurityPolicy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Pod Security Policy governs the ability to make requests that affect the Security Context that will be applied to a pod and container."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.PodSecurityPolicySpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                 v1.ObjectMeta{},
			"v1beta1.PodSecurityPolicySpec": PodSecurityPolicySpec{},
		},
	}
}

func (_ PodSecurityPolicyList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Pod Security Policy List is a list of PodSecurityPolicy objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of schema objects.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.PodSecurityPolicy"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":      unversioned.ListMeta{},
			"v1beta1.PodSecurityPolicy": PodSecurityPolicy{},
		},
	}
}

func (_ PodSecurityPolicySpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Pod Security Policy Spec defines the policy enforced."
	schema.Properties = map[string]spec.Schema{
		"privileged": {
			SchemaProps: spec.SchemaProps{
				Description: "privileged determines if a pod can request to be run as privileged.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"defaultAddCapabilities": {
			SchemaProps: spec.SchemaProps{
				Description: "DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"requiredDropCapabilities": {
			SchemaProps: spec.SchemaProps{
				Description: "RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"allowedCapabilities": {
			SchemaProps: spec.SchemaProps{
				Description: "AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"volumes": {
			SchemaProps: spec.SchemaProps{
				Description: "volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"hostNetwork": {
			SchemaProps: spec.SchemaProps{
				Description: "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"hostPorts": {
			SchemaProps: spec.SchemaProps{
				Description: "hostPorts determines which host port ranges are allowed to be exposed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.HostPortRange"),
						},
					},
				},
			},
		},
		"hostPID": {
			SchemaProps: spec.SchemaProps{
				Description: "hostPID determines if the policy allows the use of HostPID in the pod spec.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"hostIPC": {
			SchemaProps: spec.SchemaProps{
				Description: "hostIPC determines if the policy allows the use of HostIPC in the pod spec.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"seLinux": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SELinuxStrategyOptions"),
			},
		},
		"runAsUser": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.RunAsUserStrategyOptions"),
			},
		},
		"supplementalGroups": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SupplementalGroupsStrategyOptions"),
			},
		},
		"fsGroup": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.FSGroupStrategyOptions"),
			},
		},
		"readOnlyRootFilesystem": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"seLinux", "runAsUser", "supplementalGroups", "fsGroup"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.FSGroupStrategyOptions":            FSGroupStrategyOptions{},
			"v1beta1.HostPortRange":                     HostPortRange{},
			"v1beta1.RunAsUserStrategyOptions":          RunAsUserStrategyOptions{},
			"v1beta1.SELinuxStrategyOptions":            SELinuxStrategyOptions{},
			"v1beta1.SupplementalGroupsStrategyOptions": SupplementalGroupsStrategyOptions{},
		},
	}
}

func (_ ReplicaSet) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSet represents the configuration of a ReplicaSet."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.ReplicaSetSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.ReplicaSetStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":            v1.ObjectMeta{},
			"v1beta1.ReplicaSetSpec":   ReplicaSetSpec{},
			"v1beta1.ReplicaSetStatus": ReplicaSetStatus{},
		},
	}
}

func (_ ReplicaSetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSetList is a collection of ReplicaSets."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ReplicaSets. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.ReplicaSet"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1beta1.ReplicaSet":   ReplicaSet{},
		},
	}
}

func (_ ReplicaSetSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSetSpec is the specification of a ReplicaSet."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.LabelSelector"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodTemplateSpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodTemplateSpec":    v1.PodTemplateSpec{},
			"v1beta1.LabelSelector": LabelSelector{},
		},
	}
}

func (_ ReplicaSetStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSetStatus represents the current status of a ReplicaSet."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Replicas is the most recently oberved number of replicas. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"fullyLabeledReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of pods that have labels matching the labels of the pod template of the replicaset.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"readyReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of ready replicas for this replica set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"observedGeneration": {
			SchemaProps: spec.SchemaProps{
				Description: "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"replicas"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ReplicationControllerDummy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Dummy definition"
	schema.Properties = map[string]spec.Schema{}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RollbackConfig) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"revision": {
			SchemaProps: spec.SchemaProps{
				Description: "The revision to rollback to. If set to 0, rollbck to the last revision.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RollingUpdateDeployment) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Spec to control the desired behavior of rolling update."
	schema.Properties = map[string]spec.Schema{
		"maxUnavailable": {
			SchemaProps: spec.SchemaProps{
				Description: "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
		"maxSurge": {
			SchemaProps: spec.SchemaProps{
				Description: "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RunAsUserStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Run A sUser Strategy Options defines the strategy type and any options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ranges": {
			SchemaProps: spec.SchemaProps{
				Description: "Ranges are the allowed ranges of uids that may be used.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.IDRange"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"rule"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.IDRange": IDRange{},
		},
	}
}

func (_ SELinuxStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SELinux  Strategy Options defines the strategy type and any options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "type is the strategy that will dictate the allowable labels that may be set.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"seLinuxOptions": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.SELinuxOptions"),
			},
		},
	}
	schema.Required = []string{"rule"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.SELinuxOptions": v1.SELinuxOptions{},
		},
	}
}

func (_ Scale) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "represents a scaling request for a resource."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.ScaleSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.ScaleStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":       v1.ObjectMeta{},
			"v1beta1.ScaleSpec":   ScaleSpec{},
			"v1beta1.ScaleStatus": ScaleStatus{},
		},
	}
}

func (_ ScaleSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "describes the attributes of a scale subresource"
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "desired number of instances for the scaled object.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ScaleStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "represents the current status of a scale subresource."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "actual number of observed instances of the scaled object.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Description: "label query over pods that should match the replicas count. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"targetSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"replicas"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ StorageClass) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"provisioner": {
			SchemaProps: spec.SchemaProps{
				Description: "Provisioner indicates the type of the provisioner.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"parameters": {
			SchemaProps: spec.SchemaProps{
				Description: "Parameters holds the parameters for the provisioner that should create volumes of this storage class.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"provisioner"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": v1.ObjectMeta{},
		},
	}
}

func (_ StorageClassList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "StorageClassList is a collection of storage classes."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of StorageClasses",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.StorageClass"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1beta1.StorageClass": StorageClass{},
		},
	}
}

func (_ SubresourceReference) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SubresourceReference contains enough information to let you inspect or modify the referred subresource."
	schema.Properties = map[string]spec.Schema{
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "Kind of the referent; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the referent; More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"apiVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "API version of the referent",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"subresource": {
			SchemaProps: spec.SchemaProps{
				Description: "Subresource name of the referent",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ SupplementalGroupsStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ranges": {
			SchemaProps: spec.SchemaProps{
				Description: "Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.IDRange"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.IDRange": IDRange{},
		},
	}
}

func (_ ThirdPartyResource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A ThirdPartyResource is a generic representation of a resource, it is used by add-ons and plugins to add new resource types to the API.  It consists of one or more Versions of the api."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"description": {
			SchemaProps: spec.SchemaProps{
				Description: "Description is the description of this object.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"versions": {
			SchemaProps: spec.SchemaProps{
				Description: "Versions are versions for this third party object",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.APIVersion"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":      v1.ObjectMeta{},
			"v1beta1.APIVersion": APIVersion{},
		},
	}
}

func (_ ThirdPartyResourceData) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "An internal object, used for versioned storage in etcd.  Not exposed to the end user."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"data": {
			SchemaProps: spec.SchemaProps{
				Description: "Data is the raw JSON data for this data.",
				Type:        []string{"string"},
				Format:      "byte",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": v1.ObjectMeta{},
		},
	}
}

func (_ ThirdPartyResourceDataList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ThirdPartyResrouceDataList is a list of ThirdPartyResourceData."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of ThirdpartyResourceData.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.ThirdPartyResourceData"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":           unversioned.ListMeta{},
			"v1beta1.ThirdPartyResourceData": ThirdPartyResourceData{},
		},
	}
}

func (_ ThirdPartyResourceList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ThirdPartyResourceList is a list of ThirdPartyResources."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of ThirdPartyResources.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1beta1.ThirdPartyResource"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":       unversioned.ListMeta{},
			"v1beta1.ThirdPartyResource": ThirdPartyResource{},
		},
	}
}
