// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package extensions

import (
	spec "github.com/go-openapi/spec"
	api "k8s.io/kubernetes/pkg/api"
	resource "k8s.io/kubernetes/pkg/api/resource"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ APIVersion) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "An APIVersion represents a single concrete version of an object model."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of this version (e.g. 'v1').",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ CustomMetricCurrentStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Custom Metric name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
			},
		},
	}
	schema.Required = []string{"name", "value"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ CustomMetricCurrentStatusList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.CustomMetricCurrentStatus"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.CustomMetricCurrentStatus": CustomMetricCurrentStatus{},
		},
	}
}

func (_ CustomMetricTarget) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Alpha-level support for Custom Metrics in HPA (as annotations)."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Custom Metric name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
			},
		},
	}
	schema.Required = []string{"name", "value"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ CustomMetricTargetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.CustomMetricTarget"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.CustomMetricTarget": CustomMetricTarget{},
		},
	}
}

func (_ DaemonSet) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSet represents the configuration of a daemon set."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.DaemonSetSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.DaemonSetStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":             api.ObjectMeta{},
			"extensions.DaemonSetSpec":   DaemonSetSpec{},
			"extensions.DaemonSetStatus": DaemonSetStatus{},
		},
	}
}

func (_ DaemonSetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSetList is a collection of daemon sets."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of daemon sets.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.DaemonSet"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.DaemonSet": DaemonSet{},
			"unversioned.ListMeta": unversioned.ListMeta{},
		},
	}
}

func (_ DaemonSetSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSetSpec is the specification of a daemon set."
	schema.Properties = map[string]spec.Schema{
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.PodTemplateSpec"),
			},
		},
	}
	schema.Required = []string{"template"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.PodTemplateSpec":       api.PodTemplateSpec{},
			"unversioned.LabelSelector": unversioned.LabelSelector{},
		},
	}
}

func (_ DaemonSetStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonSetStatus represents the current status of a daemon set."
	schema.Properties = map[string]spec.Schema{
		"currentNumberScheduled": {
			SchemaProps: spec.SchemaProps{
				Description: "CurrentNumberScheduled is the number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"numberMisscheduled": {
			SchemaProps: spec.SchemaProps{
				Description: "NumberMisscheduled is the number of nodes that are running the daemon pod, but are not supposed to run the daemon pod.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"desiredNumberScheduled": {
			SchemaProps: spec.SchemaProps{
				Description: "DesiredNumberScheduled is the total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod).",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"currentNumberScheduled", "numberMisscheduled", "desiredNumberScheduled"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Deployment) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.DeploymentSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.DeploymentStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":              api.ObjectMeta{},
			"extensions.DeploymentSpec":   DeploymentSpec{},
			"extensions.DeploymentStatus": DeploymentStatus{},
		},
	}
}

func (_ DeploymentList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of deployments.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.Deployment"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.Deployment": Deployment{},
			"unversioned.ListMeta":  unversioned.ListMeta{},
		},
	}
}

func (_ DeploymentRollback) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeploymentRollback stores the information required to rollback a deployment."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: This must match the Name of a deployment.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"updatedAnnotations": {
			SchemaProps: spec.SchemaProps{
				Description: "The annotations to be updated to a deployment",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"rollbackTo": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.RollbackConfig"),
			},
		},
	}
	schema.Required = []string{"name", "rollbackTo"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.RollbackConfig": RollbackConfig{},
		},
	}
}

func (_ DeploymentSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.PodTemplateSpec"),
			},
		},
		"strategy": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.DeploymentStrategy"),
			},
		},
		"minReadySeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"revisionHistoryLimit": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"paused": {
			SchemaProps: spec.SchemaProps{
				Description: "Indicates that the deployment is paused and will not be processed by the deployment controller.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"rollbackTo": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.RollbackConfig"),
			},
		},
	}
	schema.Required = []string{"template"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.PodTemplateSpec":           api.PodTemplateSpec{},
			"extensions.DeploymentStrategy": DeploymentStrategy{},
			"extensions.RollbackConfig":     RollbackConfig{},
			"unversioned.LabelSelector":     unversioned.LabelSelector{},
		},
	}
}

func (_ DeploymentStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"observedGeneration": {
			SchemaProps: spec.SchemaProps{
				Description: "The generation observed by the deployment controller.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"updatedReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"availableReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"unavailableReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Total number of unavailable pods targeted by this deployment.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ DeploymentStrategy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"rollingUpdate": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.RollingUpdateDeployment"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.RollingUpdateDeployment": RollingUpdateDeployment{},
		},
	}
}

func (_ FSGroupStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "FSGroupStrategyOptions defines the strategy type and options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ranges": {
			SchemaProps: spec.SchemaProps{
				Description: "Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.IDRange"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.IDRange": IDRange{},
		},
	}
}

func (_ HTTPIngressPath) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is a extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"backend": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.IngressBackend"),
			},
		},
	}
	schema.Required = []string{"backend"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.IngressBackend": IngressBackend{},
		},
	}
}

func (_ HTTPIngressRuleValue) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'."
	schema.Properties = map[string]spec.Schema{
		"paths": {
			SchemaProps: spec.SchemaProps{
				Description: "A collection of paths that map requests to backends.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.HTTPIngressPath"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"paths"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.HTTPIngressPath": HTTPIngressPath{},
		},
	}
}

func (_ HostPortRange) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined."
	schema.Properties = map[string]spec.Schema{
		"min": {
			SchemaProps: spec.SchemaProps{
				Description: "Min is the start of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"max": {
			SchemaProps: spec.SchemaProps{
				Description: "Max is the end of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"min", "max"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ IDRange) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IDRange provides a min/max of an allowed range of IDs."
	schema.Properties = map[string]spec.Schema{
		"min": {
			SchemaProps: spec.SchemaProps{
				Description: "Min is the start of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"max": {
			SchemaProps: spec.SchemaProps{
				Description: "Max is the end of the range, inclusive.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"min", "max"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Ingress) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.IngressSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.IngressStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":           api.ObjectMeta{},
			"extensions.IngressSpec":   IngressSpec{},
			"extensions.IngressStatus": IngressStatus{},
		},
	}
}

func (_ IngressBackend) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressBackend describes all endpoints for a given service and port."
	schema.Properties = map[string]spec.Schema{
		"serviceName": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies the name of the referenced service.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"servicePort": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies the port of the referenced service.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	schema.Required = []string{"serviceName", "servicePort"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ IngressList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressList is a collection of Ingress."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of Ingress.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.Ingress"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.Ingress":   Ingress{},
			"unversioned.ListMeta": unversioned.ListMeta{},
		},
	}
}

func (_ IngressRule) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue."
	schema.Properties = map[string]spec.Schema{
		"host": {
			SchemaProps: spec.SchemaProps{
				Description: "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ IngressRuleValue) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set."
	schema.Properties = map[string]spec.Schema{
		"http": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.HTTPIngressRuleValue"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.HTTPIngressRuleValue": HTTPIngressRuleValue{},
		},
	}
}

func (_ IngressSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressSpec describes the Ingress the user wishes to exist."
	schema.Properties = map[string]spec.Schema{
		"backend": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.IngressBackend"),
			},
		},
		"tls": {
			SchemaProps: spec.SchemaProps{
				Description: "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.IngressTLS"),
						},
					},
				},
			},
		},
		"rules": {
			SchemaProps: spec.SchemaProps{
				Description: "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.IngressRule"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.IngressBackend": IngressBackend{},
			"extensions.IngressRule":    IngressRule{},
			"extensions.IngressTLS":     IngressTLS{},
		},
	}
}

func (_ IngressStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressStatus describe the current state of the Ingress."
	schema.Properties = map[string]spec.Schema{
		"loadBalancer": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.LoadBalancerStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.LoadBalancerStatus": api.LoadBalancerStatus{},
		},
	}
}

func (_ IngressTLS) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "IngressTLS describes the transport layer security associated with an Ingress."
	schema.Properties = map[string]spec.Schema{
		"hosts": {
			SchemaProps: spec.SchemaProps{
				Description: "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"secretName": {
			SchemaProps: spec.SchemaProps{
				Description: "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NetworkPolicy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.NetworkPolicySpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":               api.ObjectMeta{},
			"extensions.NetworkPolicySpec": NetworkPolicySpec{},
		},
	}
}

func (_ NetworkPolicyIngressRule) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from."
	schema.Properties = map[string]spec.Schema{
		"ports": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is not provided, this rule matches all ports (traffic not restricted by port). If this field is empty, this rule matches no ports (no traffic matches). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.NetworkPolicyPort"),
						},
					},
				},
			},
		},
		"from": {
			SchemaProps: spec.SchemaProps{
				Description: "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is not provided, this rule matches all sources (traffic not restricted by source). If this field is empty, this rule matches no sources (no traffic matches). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.NetworkPolicyPeer"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.NetworkPolicyPeer": NetworkPolicyPeer{},
			"extensions.NetworkPolicyPort": NetworkPolicyPort{},
		},
	}
}

func (_ NetworkPolicyList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NetworkPolicyList is a list of NetworkPolicy objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.NetworkPolicy"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.NetworkPolicy": NetworkPolicy{},
			"unversioned.ListMeta":     unversioned.ListMeta{},
		},
	}
}

func (_ NetworkPolicyPeer) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"podSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"namespaceSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.LabelSelector": unversioned.LabelSelector{},
		},
	}
}

func (_ NetworkPolicyPort) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"protocol": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"port": {
			SchemaProps: spec.SchemaProps{
				Description: "If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NetworkPolicySpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"podSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"ingress": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if namespace.networkPolicy.ingress.isolation is undefined and cluster policy allows it, OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not affect ingress isolation. If this field is present and contains at least one rule, this policy allows any traffic which matches at least one of the ingress rules in this list.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.NetworkPolicyIngressRule"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"podSelector"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.NetworkPolicyIngressRule": NetworkPolicyIngressRule{},
			"unversioned.LabelSelector":           unversioned.LabelSelector{},
		},
	}
}

func (_ PodSecurityPolicy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodSecurityPolicy governs the ability to make requests that affect the SecurityContext that will be applied to a pod and container."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.PodSecurityPolicySpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":                   api.ObjectMeta{},
			"extensions.PodSecurityPolicySpec": PodSecurityPolicySpec{},
		},
	}
}

func (_ PodSecurityPolicyList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodSecurityPolicyList is a list of PodSecurityPolicy objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.PodSecurityPolicy"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.PodSecurityPolicy": PodSecurityPolicy{},
			"unversioned.ListMeta":         unversioned.ListMeta{},
		},
	}
}

func (_ PodSecurityPolicySpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodSecurityPolicySpec defines the policy enforced."
	schema.Properties = map[string]spec.Schema{
		"privileged": {
			SchemaProps: spec.SchemaProps{
				Description: "Privileged determines if a pod can request to be run as privileged.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"defaultAddCapabilities": {
			SchemaProps: spec.SchemaProps{
				Description: "DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both DefaultAddCapabilities and RequiredDropCapabilities.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"requiredDropCapabilities": {
			SchemaProps: spec.SchemaProps{
				Description: "RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"allowedCapabilities": {
			SchemaProps: spec.SchemaProps{
				Description: "AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"volumes": {
			SchemaProps: spec.SchemaProps{
				Description: "Volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"hostNetwork": {
			SchemaProps: spec.SchemaProps{
				Description: "HostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"hostPorts": {
			SchemaProps: spec.SchemaProps{
				Description: "HostPorts determines which host port ranges are allowed to be exposed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.HostPortRange"),
						},
					},
				},
			},
		},
		"hostPID": {
			SchemaProps: spec.SchemaProps{
				Description: "HostPID determines if the policy allows the use of HostPID in the pod spec.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"hostIPC": {
			SchemaProps: spec.SchemaProps{
				Description: "HostIPC determines if the policy allows the use of HostIPC in the pod spec.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"seLinux": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.SELinuxStrategyOptions"),
			},
		},
		"runAsUser": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.RunAsUserStrategyOptions"),
			},
		},
		"supplementalGroups": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.SupplementalGroupsStrategyOptions"),
			},
		},
		"fsGroup": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.FSGroupStrategyOptions"),
			},
		},
		"readOnlyRootFilesystem": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"seLinux", "runAsUser", "supplementalGroups", "fsGroup"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.FSGroupStrategyOptions":            FSGroupStrategyOptions{},
			"extensions.HostPortRange":                     HostPortRange{},
			"extensions.RunAsUserStrategyOptions":          RunAsUserStrategyOptions{},
			"extensions.SELinuxStrategyOptions":            SELinuxStrategyOptions{},
			"extensions.SupplementalGroupsStrategyOptions": SupplementalGroupsStrategyOptions{},
		},
	}
}

func (_ ReplicaSet) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSet represents the configuration of a replica set."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.ReplicaSetSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.ReplicaSetStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":              api.ObjectMeta{},
			"extensions.ReplicaSetSpec":   ReplicaSetSpec{},
			"extensions.ReplicaSetStatus": ReplicaSetStatus{},
		},
	}
}

func (_ ReplicaSetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSetList is a collection of ReplicaSets."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.ReplicaSet"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.ReplicaSet": ReplicaSet{},
			"unversioned.ListMeta":  unversioned.ListMeta{},
		},
	}
}

func (_ ReplicaSetSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSetSpec is the specification of a ReplicaSet. As the internal representation of a ReplicaSet, it must have a Template set."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Replicas is the number of desired replicas.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.PodTemplateSpec"),
			},
		},
	}
	schema.Required = []string{"replicas"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.PodTemplateSpec":       api.PodTemplateSpec{},
			"unversioned.LabelSelector": unversioned.LabelSelector{},
		},
	}
}

func (_ ReplicaSetStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicaSetStatus represents the current status of a ReplicaSet."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Replicas is the number of actual replicas.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"fullyLabeledReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of pods that have labels matching the labels of the pod template of the replicaset.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"readyReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of ready replicas for this replica set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"observedGeneration": {
			SchemaProps: spec.SchemaProps{
				Description: "ObservedGeneration is the most recent generation observed by the controller.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"replicas"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ReplicationControllerDummy) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Dummy definition"
	schema.Properties = map[string]spec.Schema{}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RollbackConfig) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"revision": {
			SchemaProps: spec.SchemaProps{
				Description: "The revision to rollback to. If set to 0, rollbck to the last revision.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RollingUpdateDeployment) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Spec to control the desired behavior of rolling update."
	schema.Properties = map[string]spec.Schema{
		"maxUnavailable": {
			SchemaProps: spec.SchemaProps{
				Description: "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
		"maxSurge": {
			SchemaProps: spec.SchemaProps{
				Description: "The maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RunAsUserStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ranges": {
			SchemaProps: spec.SchemaProps{
				Description: "Ranges are the allowed ranges of uids that may be used.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.IDRange"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"rule"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.IDRange": IDRange{},
		},
	}
}

func (_ SELinuxStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SELinuxStrategyOptions defines the strategy type and any options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate the allowable labels that may be set.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"seLinuxOptions": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.SELinuxOptions"),
			},
		},
	}
	schema.Required = []string{"rule"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.SELinuxOptions": api.SELinuxOptions{},
		},
	}
}

func (_ Scale) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "represents a scaling request for a resource."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.ScaleSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/extensions.ScaleStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":         api.ObjectMeta{},
			"extensions.ScaleSpec":   ScaleSpec{},
			"extensions.ScaleStatus": ScaleStatus{},
		},
	}
}

func (_ ScaleSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "describes the attributes of a scale subresource"
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "desired number of instances for the scaled object.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ScaleStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "represents the current status of a scale subresource."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "actual number of observed instances of the scaled object.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
	}
	schema.Required = []string{"replicas"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.LabelSelector": unversioned.LabelSelector{},
		},
	}
}

func (_ StorageClass) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "StorageClass describes a named \"class\" of storage offered in a cluster. Different classes might map to quality-of-service levels, or to backup policies, or to arbitrary policies determined by the cluster administrators.  Kubernetes itself is unopinionated about what classes represent.  This concept is sometimes called \"profiles\" in other storage systems. The name of a StorageClass object is significant, and is how users can request a particular class."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"provisioner": {
			SchemaProps: spec.SchemaProps{
				Description: "provisioner is the driver expected to handle this StorageClass. This is an optionally-prefixed name, like a label key. For example: \"kubernetes.io/gce-pd\" or \"kubernetes.io/aws-ebs\". This value may not be empty.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"parameters": {
			SchemaProps: spec.SchemaProps{
				Description: "parameters holds parameters for the provisioner. These values are opaque to the  system and are passed directly to the provisioner.  The only validation done on keys is that they are not empty.  The maximum number of parameters is 512, with a cumulative max size of 256K",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"provisioner"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta": api.ObjectMeta{},
		},
	}
}

func (_ StorageClassList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "StorageClassList is a collection of storage classes."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of StorageClasses",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.StorageClass"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.StorageClass": StorageClass{},
			"unversioned.ListMeta":    unversioned.ListMeta{},
		},
	}
}

func (_ SupplementalGroupsStrategyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy."
	schema.Properties = map[string]spec.Schema{
		"rule": {
			SchemaProps: spec.SchemaProps{
				Description: "Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ranges": {
			SchemaProps: spec.SchemaProps{
				Description: "Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.IDRange"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.IDRange": IDRange{},
		},
	}
}

func (_ ThirdPartyResource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A ThirdPartyResource is a generic representation of a resource, it is used by add-ons and plugins to add new resource types to the API.  It consists of one or more Versions of the api."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"description": {
			SchemaProps: spec.SchemaProps{
				Description: "Description is the description of this object.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"versions": {
			SchemaProps: spec.SchemaProps{
				Description: "Versions are versions for this third party object",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.APIVersion"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":        api.ObjectMeta{},
			"extensions.APIVersion": APIVersion{},
		},
	}
}

func (_ ThirdPartyResourceData) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "An internal object, used for versioned storage in etcd.  Not exposed to the end user."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"data": {
			SchemaProps: spec.SchemaProps{
				Description: "Data is the raw JSON data for this data.",
				Type:        []string{"string"},
				Format:      "byte",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta": api.ObjectMeta{},
		},
	}
}

func (_ ThirdPartyResourceDataList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of third party objects",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.ThirdPartyResourceData"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.ThirdPartyResourceData": ThirdPartyResourceData{},
			"unversioned.ListMeta":              unversioned.ListMeta{},
		},
	}
}

func (_ ThirdPartyResourceList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of horizontal pod autoscalers.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/extensions.ThirdPartyResource"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"extensions.ThirdPartyResource": ThirdPartyResource{},
			"unversioned.ListMeta":          unversioned.ListMeta{},
		},
	}
}
