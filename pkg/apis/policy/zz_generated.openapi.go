// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package policy

import (
	spec "github.com/go-openapi/spec"
	api "k8s.io/kubernetes/pkg/api"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ Eviction) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/foo/evictions."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"deleteOptions": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.DeleteOptions"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.DeleteOptions": api.DeleteOptions{},
			"api.ObjectMeta":    api.ObjectMeta{},
		},
	}
}

func (_ PodDisruptionBudget) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/policy.PodDisruptionBudgetSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/policy.PodDisruptionBudgetStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":                   api.ObjectMeta{},
			"policy.PodDisruptionBudgetSpec":   PodDisruptionBudgetSpec{},
			"policy.PodDisruptionBudgetStatus": PodDisruptionBudgetStatus{},
		},
	}
}

func (_ PodDisruptionBudgetList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodDisruptionBudgetList is a collection of PodDisruptionBudgets."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/policy.PodDisruptionBudget"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"policy.PodDisruptionBudget": PodDisruptionBudget{},
			"unversioned.ListMeta":       unversioned.ListMeta{},
		},
	}
}

func (_ PodDisruptionBudgetSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget."
	schema.Properties = map[string]spec.Schema{
		"minAvailable": {
			SchemaProps: spec.SchemaProps{
				Description: "The minimum number of pods that must be available simultaneously.  This can be either an integer or a string specifying a percentage, e.g. \"28%\".",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.LabelSelector": unversioned.LabelSelector{},
		},
	}
}

func (_ PodDisruptionBudgetStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system."
	schema.Properties = map[string]spec.Schema{
		"disruptionAllowed": {
			SchemaProps: spec.SchemaProps{
				Description: "Whether or not a disruption is currently allowed.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"currentHealthy": {
			SchemaProps: spec.SchemaProps{
				Description: "current number of healthy pods",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"desiredHealthy": {
			SchemaProps: spec.SchemaProps{
				Description: "minimum desired number of healthy pods",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"expectedPods": {
			SchemaProps: spec.SchemaProps{
				Description: "total number of pods counted by this disruption budget",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"disruptionAllowed", "currentHealthy", "desiredHealthy", "expectedPods"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
