// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package rbac

import (
	spec "github.com/go-openapi/spec"
	api "k8s.io/kubernetes/pkg/api"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ ClusterRole) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding."
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ObjectMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"Rules": {
			SchemaProps: spec.SchemaProps{
				Description: "Rules holds all the PolicyRules for this ClusterRole",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.PolicyRule"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ObjectMeta", "Rules"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":       api.ObjectMeta{},
			"rbac.PolicyRule":      PolicyRule{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ ClusterRoleBinding) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject."
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ObjectMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"Subjects": {
			SchemaProps: spec.SchemaProps{
				Description: "Subjects holds references to the objects the role applies to.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.Subject"),
						},
					},
				},
			},
		},
		"RoleRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectReference"),
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ObjectMeta", "Subjects", "RoleRef"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":       api.ObjectMeta{},
			"api.ObjectReference":  api.ObjectReference{},
			"rbac.Subject":         Subject{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ ClusterRoleBindingList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ClusterRoleBindingList is a collection of ClusterRoleBindings"
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ListMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"Items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of ClusterRoleBindings",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.ClusterRoleBinding"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ListMeta", "Items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"rbac.ClusterRoleBinding": ClusterRoleBinding{},
			"unversioned.ListMeta":    unversioned.ListMeta{},
			"unversioned.TypeMeta":    unversioned.TypeMeta{},
		},
	}
}

func (_ ClusterRoleList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ClusterRoleList is a collection of ClusterRoles"
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ListMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"Items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of ClusterRoles",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.ClusterRole"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ListMeta", "Items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"rbac.ClusterRole":     ClusterRole{},
			"unversioned.ListMeta": unversioned.ListMeta{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ PolicyRule) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to."
	schema.Properties = map[string]spec.Schema{
		"Verbs": {
			SchemaProps: spec.SchemaProps{
				Description: "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"AttributeRestrictions": {
			SchemaProps: spec.SchemaProps{
				Description: "AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"APIGroups": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"Resources": {
			SchemaProps: spec.SchemaProps{
				Description: "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"ResourceNames": {
			SchemaProps: spec.SchemaProps{
				Description: "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"NonResourceURLs": {
			SchemaProps: spec.SchemaProps{
				Description: "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path If an action is not a resource API request, then the URL is split on '/' and is checked against the NonResourceURLs to look for a match. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"Verbs", "AttributeRestrictions", "APIGroups", "Resources", "ResourceNames", "NonResourceURLs"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Role) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding."
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ObjectMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"Rules": {
			SchemaProps: spec.SchemaProps{
				Description: "Rules holds all the PolicyRules for this Role",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.PolicyRule"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ObjectMeta", "Rules"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":       api.ObjectMeta{},
			"rbac.PolicyRule":      PolicyRule{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ RoleBinding) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace."
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ObjectMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectMeta"),
			},
		},
		"Subjects": {
			SchemaProps: spec.SchemaProps{
				Description: "Subjects holds references to the objects the role applies to.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.Subject"),
						},
					},
				},
			},
		},
		"RoleRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/api.ObjectReference"),
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ObjectMeta", "Subjects", "RoleRef"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"api.ObjectMeta":       api.ObjectMeta{},
			"api.ObjectReference":  api.ObjectReference{},
			"rbac.Subject":         Subject{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ RoleBindingList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RoleBindingList is a collection of RoleBindings"
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ListMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"Items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of roleBindings",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.RoleBinding"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ListMeta", "Items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"rbac.RoleBinding":     RoleBinding{},
			"unversioned.ListMeta": unversioned.ListMeta{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ RoleList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RoleList is a collection of Roles"
	schema.Properties = map[string]spec.Schema{
		"TypeMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.TypeMeta"),
			},
		},
		"ListMeta": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"Items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of roles",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/rbac.Role"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"TypeMeta", "ListMeta", "Items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"rbac.Role":            Role{},
			"unversioned.ListMeta": unversioned.ListMeta{},
			"unversioned.TypeMeta": unversioned.TypeMeta{},
		},
	}
}

func (_ Subject) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names."
	schema.Properties = map[string]spec.Schema{
		"Kind": {
			SchemaProps: spec.SchemaProps{
				Description: "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"APIVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "APIVersion holds the API group and version of the referenced object. For non-object references such as \"Group\" and \"User\" this is expected to be API version of this API group. For example \"rbac/v1alpha1\".",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the object being referenced.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Namespace": {
			SchemaProps: spec.SchemaProps{
				Description: "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Kind", "APIVersion", "Name", "Namespace"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
