// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	spec "github.com/go-openapi/spec"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ LocalSubjectAccessReview) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SubjectAccessReviewSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SubjectAccessReviewStatus"),
			},
		},
	}
	schema.Required = []string{"spec"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                     v1.ObjectMeta{},
			"v1beta1.SubjectAccessReviewSpec":   SubjectAccessReviewSpec{},
			"v1beta1.SubjectAccessReviewStatus": SubjectAccessReviewStatus{},
		},
	}
}

func (_ NonResourceAttributes) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface"
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is the URL path of the request",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"verb": {
			SchemaProps: spec.SchemaProps{
				Description: "Verb is the standard HTTP verb",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ResourceAttributes) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface"
	schema.Properties = map[string]spec.Schema{
		"namespace": {
			SchemaProps: spec.SchemaProps{
				Description: "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"verb": {
			SchemaProps: spec.SchemaProps{
				Description: "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"group": {
			SchemaProps: spec.SchemaProps{
				Description: "Group is the API Group of the Resource.  \"*\" means all.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"version": {
			SchemaProps: spec.SchemaProps{
				Description: "Version is the API Version of the Resource.  \"*\" means all.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"resource": {
			SchemaProps: spec.SchemaProps{
				Description: "Resource is one of the existing resource types.  \"*\" means all.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"subresource": {
			SchemaProps: spec.SchemaProps{
				Description: "Subresource is one of the existing resource types.  \"\" means none.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ SelfSubjectAccessReview) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SelfSubjectAccessReviewSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SubjectAccessReviewStatus"),
			},
		},
	}
	schema.Required = []string{"spec"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                       v1.ObjectMeta{},
			"v1beta1.SelfSubjectAccessReviewSpec": SelfSubjectAccessReviewSpec{},
			"v1beta1.SubjectAccessReviewStatus":   SubjectAccessReviewStatus{},
		},
	}
}

func (_ SelfSubjectAccessReviewSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set"
	schema.Properties = map[string]spec.Schema{
		"resourceAttributes": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.ResourceAttributes"),
			},
		},
		"nonResourceAttributes": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.NonResourceAttributes"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.NonResourceAttributes": NonResourceAttributes{},
			"v1beta1.ResourceAttributes":    ResourceAttributes{},
		},
	}
}

func (_ SubjectAccessReview) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SubjectAccessReview checks whether or not a user or group can perform an action."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SubjectAccessReviewSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.SubjectAccessReviewStatus"),
			},
		},
	}
	schema.Required = []string{"spec"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                     v1.ObjectMeta{},
			"v1beta1.SubjectAccessReviewSpec":   SubjectAccessReviewSpec{},
			"v1beta1.SubjectAccessReviewStatus": SubjectAccessReviewStatus{},
		},
	}
}

func (_ SubjectAccessReviewSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set"
	schema.Properties = map[string]spec.Schema{
		"resourceAttributes": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.ResourceAttributes"),
			},
		},
		"nonResourceAttributes": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.NonResourceAttributes"),
			},
		},
		"user": {
			SchemaProps: spec.SchemaProps{
				Description: "User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"group": {
			SchemaProps: spec.SchemaProps{
				Description: "Groups is the groups you're testing for.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"extra": {
			SchemaProps: spec.SchemaProps{
				Description: "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.NonResourceAttributes": NonResourceAttributes{},
			"v1beta1.ResourceAttributes":    ResourceAttributes{},
		},
	}
}

func (_ SubjectAccessReviewStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SubjectAccessReviewStatus"
	schema.Properties = map[string]spec.Schema{
		"allowed": {
			SchemaProps: spec.SchemaProps{
				Description: "Allowed is required.  True if the action would be allowed, false otherwise.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "Reason is optional.  It indicates why a request was allowed or denied.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"evaluationError": {
			SchemaProps: spec.SchemaProps{
				Description: "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"allowed"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
