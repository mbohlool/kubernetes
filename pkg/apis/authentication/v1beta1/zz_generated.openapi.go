// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1beta1

import (
	spec "github.com/go-openapi/spec"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ TokenReview) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.TokenReviewSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.TokenReviewStatus"),
			},
		},
	}
	schema.Required = []string{"spec"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":             v1.ObjectMeta{},
			"v1beta1.TokenReviewSpec":   TokenReviewSpec{},
			"v1beta1.TokenReviewStatus": TokenReviewStatus{},
		},
	}
}

func (_ TokenReviewSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "TokenReviewSpec is a description of the token authentication request."
	schema.Properties = map[string]spec.Schema{
		"token": {
			SchemaProps: spec.SchemaProps{
				Description: "Token is the opaque bearer token.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ TokenReviewStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "TokenReviewStatus is the result of the token authentication request."
	schema.Properties = map[string]spec.Schema{
		"authenticated": {
			SchemaProps: spec.SchemaProps{
				Description: "Authenticated indicates that the token was associated with a known user.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"user": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1beta1.UserInfo"),
			},
		},
		"error": {
			SchemaProps: spec.SchemaProps{
				Description: "Error indicates that the token couldn't be checked",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1beta1.UserInfo": UserInfo{},
		},
	}
}

func (_ UserInfo) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "UserInfo holds the information about the user needed to implement the user.Info interface."
	schema.Properties = map[string]spec.Schema{
		"username": {
			SchemaProps: spec.SchemaProps{
				Description: "The name that uniquely identifies this user among all active users.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"uid": {
			SchemaProps: spec.SchemaProps{
				Description: "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"groups": {
			SchemaProps: spec.SchemaProps{
				Description: "The names of groups this user is a part of.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"extra": {
			SchemaProps: spec.SchemaProps{
				Description: "Any additional information provided by the authenticator.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
