// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package runtime

import (
	spec "github.com/go-openapi/spec"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ RawExtension) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
	schema.Properties = map[string]spec.Schema{
		"Raw": {
			SchemaProps: spec.SchemaProps{
				Description: "Raw is the underlying serialization of this object.",
				Type:        []string{"string"},
				Format:      "byte",
			},
		},
	}
	schema.Required = []string{"Raw"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ TypeMeta) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this: type MyAwesomeAPIObject struct {\n     runtime.TypeMeta    `json:\",inline\"`\n     ... // other fields\n} func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *unversioned.GroupVersionKind) { unversioned.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields."
	schema.Properties = map[string]spec.Schema{
		"apiVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Unknown) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation."
	schema.Properties = map[string]spec.Schema{
		"Raw": {
			SchemaProps: spec.SchemaProps{
				Description: "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
				Type:        []string{"string"},
				Format:      "byte",
			},
		},
		"ContentEncoding": {
			SchemaProps: spec.SchemaProps{
				Description: "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ContentType": {
			SchemaProps: spec.SchemaProps{
				Description: "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Raw", "ContentEncoding", "ContentType"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
