// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package unversioned

import (
	spec "github.com/go-openapi/spec"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ APIGroup) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "APIGroup contains the name, the supported versions, and the preferred version of a group."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "name is the name of the group.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"versions": {
			SchemaProps: spec.SchemaProps{
				Description: "versions are the versions supported in this group.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.GroupVersionForDiscovery"),
						},
					},
				},
			},
		},
		"preferredVersion": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.GroupVersionForDiscovery"),
			},
		},
		"serverAddressByClientCIDRs": {
			SchemaProps: spec.SchemaProps{
				Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.ServerAddressByClientCIDR"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"name", "versions", "serverAddressByClientCIDRs"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.GroupVersionForDiscovery":  GroupVersionForDiscovery{},
			"unversioned.ServerAddressByClientCIDR": ServerAddressByClientCIDR{},
		},
	}
}

func (_ APIGroupList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis."
	schema.Properties = map[string]spec.Schema{
		"groups": {
			SchemaProps: spec.SchemaProps{
				Description: "groups is a list of APIGroup.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.APIGroup"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"groups"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.APIGroup": APIGroup{},
		},
	}
}

func (_ APIResource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "APIResource specifies the name of a resource and whether it is namespaced."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "name is the name of the resource.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"namespaced": {
			SchemaProps: spec.SchemaProps{
				Description: "namespaced indicates if a resource is namespaced or not.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name", "namespaced", "kind"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ APIResourceList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced."
	schema.Properties = map[string]spec.Schema{
		"groupVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "groupVersion is the group and version this APIResourceList is for.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"resources": {
			SchemaProps: spec.SchemaProps{
				Description: "resources contains the name of the resources and if they are namespaced.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.APIResource"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"groupVersion", "resources"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.APIResource": APIResource{},
		},
	}
}

func (_ APIVersions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API."
	schema.Properties = map[string]spec.Schema{
		"versions": {
			SchemaProps: spec.SchemaProps{
				Description: "versions are the api versions that are available.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"serverAddressByClientCIDRs": {
			SchemaProps: spec.SchemaProps{
				Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.ServerAddressByClientCIDR"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"versions", "serverAddressByClientCIDRs"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ServerAddressByClientCIDR": ServerAddressByClientCIDR{},
		},
	}
}

func (_ Duration) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json."
	schema.Properties = map[string]spec.Schema{
		"Duration": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"Duration"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ExportOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ExportOptions is the query options to the standard REST get call."
	schema.Properties = map[string]spec.Schema{
		"export": {
			SchemaProps: spec.SchemaProps{
				Description: "Should this value be exported.  Export strips fields that a user can not specify.`",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"exact": {
			SchemaProps: spec.SchemaProps{
				Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"export", "exact"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GroupKind) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types"
	schema.Properties = map[string]spec.Schema{
		"Group": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Kind": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Group", "Kind"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GroupResource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types"
	schema.Properties = map[string]spec.Schema{
		"Group": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Resource": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Group", "Resource"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GroupVersion) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API."
	schema.Properties = map[string]spec.Schema{
		"Group": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Version": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Group", "Version"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GroupVersionForDiscovery) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility."
	schema.Properties = map[string]spec.Schema{
		"groupVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "groupVersion specifies the API group and version in the form \"group/version\"",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"version": {
			SchemaProps: spec.SchemaProps{
				Description: "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"groupVersion", "version"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GroupVersionKind) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling"
	schema.Properties = map[string]spec.Schema{
		"Group": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Version": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Kind": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Group", "Version", "Kind"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GroupVersionResource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling"
	schema.Properties = map[string]spec.Schema{
		"Group": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Version": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Resource": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"Group", "Version", "Resource"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ LabelSelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects."
	schema.Properties = map[string]spec.Schema{
		"matchLabels": {
			SchemaProps: spec.SchemaProps{
				Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"matchExpressions": {
			SchemaProps: spec.SchemaProps{
				Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelectorRequirement"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.LabelSelectorRequirement": LabelSelectorRequirement{},
		},
	}
}

func (_ LabelSelectorRequirement) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "key is the label key that the selector applies to.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"operator": {
			SchemaProps: spec.SchemaProps{
				Description: "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"values": {
			SchemaProps: spec.SchemaProps{
				Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"key", "operator"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ListMeta) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}."
	schema.Properties = map[string]spec.Schema{
		"selfLink": {
			SchemaProps: spec.SchemaProps{
				Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"resourceVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Patch) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body."
	schema.Properties = map[string]spec.Schema{}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RootPaths) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\"."
	schema.Properties = map[string]spec.Schema{
		"paths": {
			SchemaProps: spec.SchemaProps{
				Description: "paths are the paths available at root.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"paths"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ServerAddressByClientCIDR) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match."
	schema.Properties = map[string]spec.Schema{
		"clientCIDR": {
			SchemaProps: spec.SchemaProps{
				Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"serverAddress": {
			SchemaProps: spec.SchemaProps{
				Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"clientCIDR", "serverAddress"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Status) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Status is a return value for calls that don't return other objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Description: "Status of the operation. One of: \"Success\" or \"Failure\". More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "A human-readable description of the status of this operation.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"details": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.StatusDetails"),
			},
		},
		"code": {
			SchemaProps: spec.SchemaProps{
				Description: "Suggested HTTP return code for this status, 0 if not set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":      ListMeta{},
			"unversioned.StatusDetails": StatusDetails{},
		},
	}
}

func (_ StatusCause) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered."
	schema.Properties = map[string]spec.Schema{
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"field": {
			SchemaProps: spec.SchemaProps{
				Description: "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ StatusDetails) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"group": {
			SchemaProps: spec.SchemaProps{
				Description: "The group attribute of the resource associated with the status StatusReason.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"causes": {
			SchemaProps: spec.SchemaProps{
				Description: "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/unversioned.StatusCause"),
						},
					},
				},
			},
		},
		"retryAfterSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "If specified, the time in seconds before the operation should be retried.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.StatusCause": StatusCause{},
		},
	}
}

func (_ Time) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
	schema.Properties = map[string]spec.Schema{
		"Time": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
	}
	schema.Required = []string{"Time"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Timestamp) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs."
	schema.Properties = map[string]spec.Schema{
		"seconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"nanos": {
			SchemaProps: spec.SchemaProps{
				Description: "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"seconds", "nanos"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ TypeMeta) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta."
	schema.Properties = map[string]spec.Schema{
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"apiVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ emptyObjectKind) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = ""
	schema.Properties = map[string]spec.Schema{}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
