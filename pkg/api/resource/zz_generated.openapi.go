// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package resource

import (
	spec "github.com/go-openapi/spec"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
)

func (_ Quantity) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and Int64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNOTE: We reserve the right to amend this canonical format, perhaps to\n  allow 1.5 to be canonical.\n  or after March 2015.\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation."
	schema.Properties = map[string]spec.Schema{
		"i": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/resource.int64Amount"),
			},
		},
		"d": {
			SchemaProps: spec.SchemaProps{
				Description: "d is the quantity in inf.Dec form if d.Dec != nil",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"s": {
			SchemaProps: spec.SchemaProps{
				Description: "s is the generated value of this quantity to avoid recalculation",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"Format": {
			SchemaProps: spec.SchemaProps{
				Description: "Change Format at will. See the comment for Canonicalize for more details.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"i", "d", "s", "Format"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.int64Amount": int64Amount{},
		},
	}
}

func (_ int64Amount) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "int64Amount represents a fixed precision numerator and arbitrary scale exponent. It is faster than operations on inf.Dec for values that can be represented as int64."
	schema.Properties = map[string]spec.Schema{
		"value": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"scale": {
			SchemaProps: spec.SchemaProps{
				Description: "",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"value", "scale"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}
