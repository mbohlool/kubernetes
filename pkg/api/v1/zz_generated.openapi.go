// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	resource "k8s.io/kubernetes/pkg/api/resource"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	openapi "k8s.io/kubernetes/pkg/genericapiserver/openapi"
	runtime "k8s.io/kubernetes/pkg/runtime"
)

func (_ AWSElasticBlockStoreVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"volumeID": {
			SchemaProps: spec.SchemaProps{
				Description: "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"partition": {
			SchemaProps: spec.SchemaProps{
				Description: "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#awselasticblockstore",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"volumeID"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Affinity) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Affinity is a group of affinity scheduling rules."
	schema.Properties = map[string]spec.Schema{
		"nodeAffinity": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeAffinity"),
			},
		},
		"podAffinity": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodAffinity"),
			},
		},
		"podAntiAffinity": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodAntiAffinity"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NodeAffinity":    NodeAffinity{},
			"v1.PodAffinity":     PodAffinity{},
			"v1.PodAntiAffinity": PodAntiAffinity{},
		},
	}
}

func (_ AttachedVolume) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "AttachedVolume describes a volume attached to a node"
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the attached volume",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"devicePath": {
			SchemaProps: spec.SchemaProps{
				Description: "DevicePath represents the device path where the volume should be avilable",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name", "devicePath"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ AvoidPods) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "AvoidPods describes pods that should avoid this node. This is the value for a Node annotation with key scheduler.alpha.kubernetes.io/preferAvoidPods and will eventually become a field of NodeStatus."
	schema.Properties = map[string]spec.Schema{
		"preferAvoidPods": {
			SchemaProps: spec.SchemaProps{
				Description: "Bounded-sized list of signatures of pods that should avoid this node, sorted in timestamp order from oldest to newest. Size of the slice is unspecified.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PreferAvoidPodsEntry"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PreferAvoidPodsEntry": PreferAvoidPodsEntry{},
		},
	}
}

func (_ AzureDiskVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
	schema.Properties = map[string]spec.Schema{
		"diskName": {
			SchemaProps: spec.SchemaProps{
				Description: "The Name of the data disk in the blob storage",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"diskURI": {
			SchemaProps: spec.SchemaProps{
				Description: "The URI the data disk in the blob storage",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"cachingMode": {
			SchemaProps: spec.SchemaProps{
				Description: "Host Caching mode: None, Read Only, Read Write.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"diskName", "diskURI"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ AzureFileVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
	schema.Properties = map[string]spec.Schema{
		"secretName": {
			SchemaProps: spec.SchemaProps{
				Description: "the name of secret that contains Azure Storage Account Name and Key",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"shareName": {
			SchemaProps: spec.SchemaProps{
				Description: "Share Name",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"secretName", "shareName"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Binding) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Binding ties one object to another. For example, a pod is bound to a node by a scheduler."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"target": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectReference"),
			},
		},
	}
	schema.Required = []string{"target"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":      ObjectMeta{},
			"v1.ObjectReference": ObjectReference{},
		},
	}
}

func (_ Capabilities) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Adds and removes POSIX capabilities from running containers."
	schema.Properties = map[string]spec.Schema{
		"add": {
			SchemaProps: spec.SchemaProps{
				Description: "Added capabilities",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"drop": {
			SchemaProps: spec.SchemaProps{
				Description: "Removed capabilities",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ CephFSVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"monitors": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"user": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"secretFile": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"secretRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.LocalObjectReference"),
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"monitors"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LocalObjectReference": LocalObjectReference{},
		},
	}
}

func (_ CinderVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"volumeID": {
			SchemaProps: spec.SchemaProps{
				Description: "volume id used to identify the volume in cinder More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"volumeID"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ComponentCondition) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Information about the condition of a component."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of condition for a component. Valid value: \"Healthy\"",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Description: "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\".",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Message about the condition for a component. For example, information about a health check.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"error": {
			SchemaProps: spec.SchemaProps{
				Description: "Condition error code for a component. For example, a health check error code.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"type", "status"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ComponentStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ComponentStatus (and ComponentStatusList) holds the cluster validation info."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"conditions": {
			SchemaProps: spec.SchemaProps{
				Description: "List of component conditions observed",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ComponentCondition"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ComponentCondition": ComponentCondition{},
			"v1.ObjectMeta":         ObjectMeta{},
		},
	}
}

func (_ ComponentStatusList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Status of all the conditions for the component as a list of ComponentStatus objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ComponentStatus objects.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ComponentStatus"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.ComponentStatus":   ComponentStatus{},
		},
	}
}

func (_ ConfigMap) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ConfigMap holds configuration data for pods to consume."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"data": {
			SchemaProps: spec.SchemaProps{
				Description: "Data contains the configuration data. Each key must be a valid DNS_SUBDOMAIN with an optional leading dot.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": ObjectMeta{},
		},
	}
}

func (_ ConfigMapKeySelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Selects a key from a ConfigMap."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "The key to select.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"key"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ConfigMapList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ConfigMapList is a resource containing a list of ConfigMap objects."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of ConfigMaps.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ConfigMap"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.ConfigMap":         ConfigMap{},
		},
	}
}

func (_ ConfigMapVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.KeyToPath"),
						},
					},
				},
			},
		},
		"defaultMode": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.KeyToPath": KeyToPath{},
		},
	}
}

func (_ Container) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A single application container that you want to run within a pod."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"image": {
			SchemaProps: spec.SchemaProps{
				Description: "Docker image name. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"command": {
			SchemaProps: spec.SchemaProps{
				Description: "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"args": {
			SchemaProps: spec.SchemaProps{
				Description: "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/containers.md#containers-and-commands",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"workingDir": {
			SchemaProps: spec.SchemaProps{
				Description: "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"ports": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ContainerPort"),
						},
					},
				},
			},
		},
		"env": {
			SchemaProps: spec.SchemaProps{
				Description: "List of environment variables to set in the container. Cannot be updated.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.EnvVar"),
						},
					},
				},
			},
		},
		"resources": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ResourceRequirements"),
			},
		},
		"volumeMounts": {
			SchemaProps: spec.SchemaProps{
				Description: "Pod volumes to mount into the container's filesystem. Cannot be updated.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.VolumeMount"),
						},
					},
				},
			},
		},
		"livenessProbe": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Probe"),
			},
		},
		"readinessProbe": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Probe"),
			},
		},
		"lifecycle": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Lifecycle"),
			},
		},
		"terminationMessagePath": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"imagePullPolicy": {
			SchemaProps: spec.SchemaProps{
				Description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md#updating-images",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"securityContext": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.SecurityContext"),
			},
		},
		"stdin": {
			SchemaProps: spec.SchemaProps{
				Description: "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"stdinOnce": {
			SchemaProps: spec.SchemaProps{
				Description: "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"tty": {
			SchemaProps: spec.SchemaProps{
				Description: "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ContainerPort":        ContainerPort{},
			"v1.EnvVar":               EnvVar{},
			"v1.Lifecycle":            Lifecycle{},
			"v1.Probe":                Probe{},
			"v1.ResourceRequirements": ResourceRequirements{},
			"v1.SecurityContext":      SecurityContext{},
			"v1.VolumeMount":          VolumeMount{},
		},
	}
}

func (_ ContainerImage) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Describe a container image"
	schema.Properties = map[string]spec.Schema{
		"names": {
			SchemaProps: spec.SchemaProps{
				Description: "Names by which this image is known. e.g. [\"gcr.io/google_containers/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"sizeBytes": {
			SchemaProps: spec.SchemaProps{
				Description: "The size of the image in bytes.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"names"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ContainerPort) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ContainerPort represents a network port in a single container."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"hostPort": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"containerPort": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"protocol": {
			SchemaProps: spec.SchemaProps{
				Description: "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"hostIP": {
			SchemaProps: spec.SchemaProps{
				Description: "What host IP to bind the external port to.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"containerPort"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ContainerState) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting."
	schema.Properties = map[string]spec.Schema{
		"waiting": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ContainerStateWaiting"),
			},
		},
		"running": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ContainerStateRunning"),
			},
		},
		"terminated": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ContainerStateTerminated"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ContainerStateRunning":    ContainerStateRunning{},
			"v1.ContainerStateTerminated": ContainerStateTerminated{},
			"v1.ContainerStateWaiting":    ContainerStateWaiting{},
		},
	}
}

func (_ ContainerStateRunning) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ContainerStateRunning is a running state of a container."
	schema.Properties = map[string]spec.Schema{
		"startedAt": {
			SchemaProps: spec.SchemaProps{
				Description: "Time at which the container was last (re-)started",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ContainerStateTerminated) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ContainerStateTerminated is a terminated state of a container."
	schema.Properties = map[string]spec.Schema{
		"exitCode": {
			SchemaProps: spec.SchemaProps{
				Description: "Exit status from the last termination of the container",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"signal": {
			SchemaProps: spec.SchemaProps{
				Description: "Signal from the last termination of the container",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "(brief) reason from the last termination of the container",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Message regarding the last termination of the container",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"startedAt": {
			SchemaProps: spec.SchemaProps{
				Description: "Time at which previous execution of the container started",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"finishedAt": {
			SchemaProps: spec.SchemaProps{
				Description: "Time at which the container last terminated",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"containerID": {
			SchemaProps: spec.SchemaProps{
				Description: "Container's ID in the format 'docker://<container_id>'",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"exitCode"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ContainerStateWaiting) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ContainerStateWaiting is a waiting state of a container."
	schema.Properties = map[string]spec.Schema{
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "(brief) reason the container is not yet running.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Message regarding why the container is not yet running.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ContainerStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ContainerStatus contains details for the current status of this container."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"state": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ContainerState"),
			},
		},
		"lastState": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ContainerState"),
			},
		},
		"ready": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies whether the container has passed its readiness probe.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"restartCount": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"image": {
			SchemaProps: spec.SchemaProps{
				Description: "The image the container is running. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"imageID": {
			SchemaProps: spec.SchemaProps{
				Description: "ImageID of the container's image.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"containerID": {
			SchemaProps: spec.SchemaProps{
				Description: "Container's ID in the format 'docker://<container_id>'. More info: http://releases.k8s.io/HEAD/docs/user-guide/container-environment.md#container-information",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name", "ready", "restartCount", "image", "imageID"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ContainerState": ContainerState{},
		},
	}
}

func (_ DaemonEndpoint) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DaemonEndpoint contains information about a single Daemon endpoint."
	schema.Properties = map[string]spec.Schema{
		"Port": {
			SchemaProps: spec.SchemaProps{
				Description: "Port number of the given endpoint.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"Port"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ DeleteOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DeleteOptions may be provided when deleting an API object"
	schema.Properties = map[string]spec.Schema{
		"gracePeriodSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"preconditions": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Preconditions"),
			},
		},
		"orphanDependents": {
			SchemaProps: spec.SchemaProps{
				Description: "Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.Preconditions": Preconditions{},
		},
	}
}

func (_ DownwardAPIVolumeFile) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DownwardAPIVolumeFile represents information to create the file containing the pod field"
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fieldRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectFieldSelector"),
			},
		},
		"resourceFieldRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ResourceFieldSelector"),
			},
		},
		"mode": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"path"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectFieldSelector":   ObjectFieldSelector{},
			"v1.ResourceFieldSelector": ResourceFieldSelector{},
		},
	}
}

func (_ DownwardAPIVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of downward API volume file",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.DownwardAPIVolumeFile"),
						},
					},
				},
			},
		},
		"defaultMode": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.DownwardAPIVolumeFile": DownwardAPIVolumeFile{},
		},
	}
}

func (_ EmptyDirVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"medium": {
			SchemaProps: spec.SchemaProps{
				Description: "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#emptydir",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ EndpointAddress) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EndpointAddress is a tuple that describes single IP address."
	schema.Properties = map[string]spec.Schema{
		"ip": {
			SchemaProps: spec.SchemaProps{
				Description: "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"hostname": {
			SchemaProps: spec.SchemaProps{
				Description: "The Hostname of this endpoint",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"nodeName": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"targetRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectReference"),
			},
		},
	}
	schema.Required = []string{"ip"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectReference": ObjectReference{},
		},
	}
}

func (_ EndpointPort) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EndpointPort is a tuple that describes a single port."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"port": {
			SchemaProps: spec.SchemaProps{
				Description: "The port number of the endpoint.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"protocol": {
			SchemaProps: spec.SchemaProps{
				Description: "The IP protocol for this port. Must be UDP or TCP. Default is TCP.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"port"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ EndpointSubset) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]"
	schema.Properties = map[string]spec.Schema{
		"addresses": {
			SchemaProps: spec.SchemaProps{
				Description: "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.EndpointAddress"),
						},
					},
				},
			},
		},
		"notReadyAddresses": {
			SchemaProps: spec.SchemaProps{
				Description: "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.EndpointAddress"),
						},
					},
				},
			},
		},
		"ports": {
			SchemaProps: spec.SchemaProps{
				Description: "Port numbers available on the related IP addresses.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.EndpointPort"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.EndpointAddress": EndpointAddress{},
			"v1.EndpointPort":    EndpointPort{},
		},
	}
}

func (_ Endpoints) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"subsets": {
			SchemaProps: spec.SchemaProps{
				Description: "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.EndpointSubset"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"subsets"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.EndpointSubset": EndpointSubset{},
			"v1.ObjectMeta":     ObjectMeta{},
		},
	}
}

func (_ EndpointsList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EndpointsList is a list of endpoints."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of endpoints.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Endpoints"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Endpoints":         Endpoints{},
		},
	}
}

func (_ EnvVar) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EnvVar represents an environment variable present in a Container."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Description: "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"valueFrom": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.EnvVarSource"),
			},
		},
	}
	schema.Required = []string{"name"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.EnvVarSource": EnvVarSource{},
		},
	}
}

func (_ EnvVarSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EnvVarSource represents a source for the value of an EnvVar."
	schema.Properties = map[string]spec.Schema{
		"fieldRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectFieldSelector"),
			},
		},
		"resourceFieldRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ResourceFieldSelector"),
			},
		},
		"configMapKeyRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ConfigMapKeySelector"),
			},
		},
		"secretKeyRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.SecretKeySelector"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ConfigMapKeySelector":  ConfigMapKeySelector{},
			"v1.ObjectFieldSelector":   ObjectFieldSelector{},
			"v1.ResourceFieldSelector": ResourceFieldSelector{},
			"v1.SecretKeySelector":     SecretKeySelector{},
		},
	}
}

func (_ Event) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Event is a report of an event somewhere in the cluster."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"involvedObject": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectReference"),
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "A human-readable description of the status of this operation.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"source": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.EventSource"),
			},
		},
		"firstTimestamp": {
			SchemaProps: spec.SchemaProps{
				Description: "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"lastTimestamp": {
			SchemaProps: spec.SchemaProps{
				Description: "The time at which the most recent occurrence of this event was recorded.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"count": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of times this event has occurred.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of this event (Normal, Warning), new types could be added in the future",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"metadata", "involvedObject"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.EventSource":     EventSource{},
			"v1.ObjectMeta":      ObjectMeta{},
			"v1.ObjectReference": ObjectReference{},
		},
	}
}

func (_ EventList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EventList is a list of events."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of events",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Event"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Event":             Event{},
		},
	}
}

func (_ EventSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "EventSource contains information for an event."
	schema.Properties = map[string]spec.Schema{
		"component": {
			SchemaProps: spec.SchemaProps{
				Description: "Component from which the event is generated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"host": {
			SchemaProps: spec.SchemaProps{
				Description: "Host name on which the event is generated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ExecAction) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ExecAction describes a \"run in container\" action."
	schema.Properties = map[string]spec.Schema{
		"command": {
			SchemaProps: spec.SchemaProps{
				Description: "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ExportOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ExportOptions is the query options to the standard REST get call."
	schema.Properties = map[string]spec.Schema{
		"export": {
			SchemaProps: spec.SchemaProps{
				Description: "Should this value be exported.  Export strips fields that a user can not specify.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"exact": {
			SchemaProps: spec.SchemaProps{
				Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"export", "exact"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ FCVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"targetWWNs": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: FC target world wide names (WWNs)",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"lun": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: FC target lun number",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"targetWWNs", "lun"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ FlexVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "FlexVolume represents a generic volume resource that is provisioned/attached using a exec based plugin. This is an alpha feature and may change in future."
	schema.Properties = map[string]spec.Schema{
		"driver": {
			SchemaProps: spec.SchemaProps{
				Description: "Driver is the name of the driver to use for this volume.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"secretRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.LocalObjectReference"),
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"options": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Extra command options if any.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"driver"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LocalObjectReference": LocalObjectReference{},
		},
	}
}

func (_ FlockerVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Flocker volume mounted by the Flocker agent. Flocker volumes do not support ownership management or SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"datasetName": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"datasetName"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GCEPersistentDiskVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"pdName": {
			SchemaProps: spec.SchemaProps{
				Description: "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"partition": {
			SchemaProps: spec.SchemaProps{
				Description: "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#gcepersistentdisk",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"pdName"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GitRepoVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"repository": {
			SchemaProps: spec.SchemaProps{
				Description: "Repository URL",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"revision": {
			SchemaProps: spec.SchemaProps{
				Description: "Commit hash for the specified revision.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"directory": {
			SchemaProps: spec.SchemaProps{
				Description: "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"repository"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ GlusterfsVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"endpoints": {
			SchemaProps: spec.SchemaProps{
				Description: "EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is the Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"endpoints", "path"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ HTTPGetAction) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HTTPGetAction describes an action based on HTTP Get requests."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path to access on the HTTP server.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"port": {
			SchemaProps: spec.SchemaProps{
				Description: "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
		"host": {
			SchemaProps: spec.SchemaProps{
				Description: "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"scheme": {
			SchemaProps: spec.SchemaProps{
				Description: "Scheme to use for connecting to the host. Defaults to HTTP.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"httpHeaders": {
			SchemaProps: spec.SchemaProps{
				Description: "Custom headers to set in the request. HTTP allows repeated headers.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.HTTPHeader"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"port"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.HTTPHeader": HTTPHeader{},
		},
	}
}

func (_ HTTPHeader) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "HTTPHeader describes a custom header to be used in HTTP probes"
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "The header field name",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Description: "The header field value",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name", "value"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Handler) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Handler defines a specific action that should be taken"
	schema.Properties = map[string]spec.Schema{
		"exec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ExecAction"),
			},
		},
		"httpGet": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.HTTPGetAction"),
			},
		},
		"tcpSocket": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.TCPSocketAction"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ExecAction":      ExecAction{},
			"v1.HTTPGetAction":   HTTPGetAction{},
			"v1.TCPSocketAction": TCPSocketAction{},
		},
	}
}

func (_ HostPathVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path of the directory on the host. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#hostpath",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"path"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ISCSIVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"targetPortal": {
			SchemaProps: spec.SchemaProps{
				Description: "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"iqn": {
			SchemaProps: spec.SchemaProps{
				Description: "Target iSCSI Qualified Name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"lun": {
			SchemaProps: spec.SchemaProps{
				Description: "iSCSI target lun number.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"iscsiInterface": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#iscsi",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"targetPortal", "iqn", "lun"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ KeyToPath) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Maps a string key to a path within a volume."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "The key to project.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"mode": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"key", "path"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Lifecycle) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted."
	schema.Properties = map[string]spec.Schema{
		"postStart": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Handler"),
			},
		},
		"preStop": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Handler"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.Handler": Handler{},
		},
	}
}

func (_ LimitRange) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LimitRange sets resource usage limits for each kind of resource in a Namespace."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.LimitRangeSpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LimitRangeSpec": LimitRangeSpec{},
			"v1.ObjectMeta":     ObjectMeta{},
		},
	}
}

func (_ LimitRangeItem) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LimitRangeItem defines a min/max usage limit for any resource that matches on kind."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of resource that this limit applies to.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"max": {
			SchemaProps: spec.SchemaProps{
				Description: "Max usage constraints on this kind by resource name.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"min": {
			SchemaProps: spec.SchemaProps{
				Description: "Min usage constraints on this kind by resource name.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"default": {
			SchemaProps: spec.SchemaProps{
				Description: "Default resource requirement limit value by resource name if resource limit is omitted.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"defaultRequest": {
			SchemaProps: spec.SchemaProps{
				Description: "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"maxLimitRequestRatio": {
			SchemaProps: spec.SchemaProps{
				Description: "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ LimitRangeList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LimitRangeList is a list of LimitRange items."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of LimitRange objects. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_limit_range.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.LimitRange"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.LimitRange":        LimitRange{},
		},
	}
}

func (_ LimitRangeSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LimitRangeSpec defines a min/max usage limit for resources that match on kind."
	schema.Properties = map[string]spec.Schema{
		"limits": {
			SchemaProps: spec.SchemaProps{
				Description: "Limits is the list of LimitRangeItem objects that are enforced.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.LimitRangeItem"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"limits"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LimitRangeItem": LimitRangeItem{},
		},
	}
}

func (_ List) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "List holds a list of objects, which may not be known by the server."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of objects",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/runtime.RawExtension"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"runtime.RawExtension": runtime.RawExtension{},
			"unversioned.ListMeta": unversioned.ListMeta{},
		},
	}
}

func (_ ListOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ListOptions is the query options to a standard REST list call."
	schema.Properties = map[string]spec.Schema{
		"labelSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fieldSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"watch": {
			SchemaProps: spec.SchemaProps{
				Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"resourceVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"timeoutSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Timeout for the list/watch call.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ LoadBalancerIngress) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point."
	schema.Properties = map[string]spec.Schema{
		"ip": {
			SchemaProps: spec.SchemaProps{
				Description: "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"hostname": {
			SchemaProps: spec.SchemaProps{
				Description: "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ LoadBalancerStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LoadBalancerStatus represents the status of a load-balancer."
	schema.Properties = map[string]spec.Schema{
		"ingress": {
			SchemaProps: spec.SchemaProps{
				Description: "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.LoadBalancerIngress"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LoadBalancerIngress": LoadBalancerIngress{},
		},
	}
}

func (_ LocalObjectReference) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NFSVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"server": {
			SchemaProps: spec.SchemaProps{
				Description: "Server is the hostname or IP address of the NFS server. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path that is exported by the NFS server. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#nfs",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"server", "path"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Namespace) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Namespace provides a scope for Names. Use of multiple namespaces is optional."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NamespaceSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NamespaceStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NamespaceSpec":   NamespaceSpec{},
			"v1.NamespaceStatus": NamespaceStatus{},
			"v1.ObjectMeta":      ObjectMeta{},
		},
	}
}

func (_ NamespaceList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NamespaceList is a list of Namespaces."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is the list of Namespace objects in the list. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Namespace"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Namespace":         Namespace{},
		},
	}
}

func (_ NamespaceSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NamespaceSpec describes the attributes on a Namespace."
	schema.Properties = map[string]spec.Schema{
		"finalizers": {
			SchemaProps: spec.SchemaProps{
				Description: "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: http://releases.k8s.io/HEAD/docs/design/namespaces.md#finalizers",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NamespaceStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NamespaceStatus is information about the current status of a Namespace."
	schema.Properties = map[string]spec.Schema{
		"phase": {
			SchemaProps: spec.SchemaProps{
				Description: "Phase is the current lifecycle phase of the namespace. More info: http://releases.k8s.io/HEAD/docs/design/namespaces.md#phases",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Node) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Node is a worker node in Kubernetes, formerly known as minion. Each node will have a unique identifier in the cache (i.e. in etcd)."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NodeSpec":   NodeSpec{},
			"v1.NodeStatus": NodeStatus{},
			"v1.ObjectMeta": ObjectMeta{},
		},
	}
}

func (_ NodeAddress) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeAddress contains information for the node's address."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Node address type, one of Hostname, ExternalIP or InternalIP.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"address": {
			SchemaProps: spec.SchemaProps{
				Description: "The node address.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"type", "address"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NodeAffinity) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Node affinity is a group of node affinity scheduling rules."
	schema.Properties = map[string]spec.Schema{
		"requiredDuringSchedulingIgnoredDuringExecution": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeSelector"),
			},
		},
		"preferredDuringSchedulingIgnoredDuringExecution": {
			SchemaProps: spec.SchemaProps{
				Description: "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PreferredSchedulingTerm"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NodeSelector":            NodeSelector{},
			"v1.PreferredSchedulingTerm": PreferredSchedulingTerm{},
		},
	}
}

func (_ NodeCondition) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeCondition contains condition infromation for a node."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type of node condition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Description: "Status of the condition, one of True, False, Unknown.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"lastHeartbeatTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Last time we got an update on a given condition.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"lastTransitionTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Last time the condition transit from one status to another.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "(brief) reason for the condition's last transition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Human readable message indicating details about last transition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"type", "status"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NodeDaemonEndpoints) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeDaemonEndpoints lists ports opened by daemons running on the Node."
	schema.Properties = map[string]spec.Schema{
		"kubeletEndpoint": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.DaemonEndpoint"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.DaemonEndpoint": DaemonEndpoint{},
		},
	}
}

func (_ NodeList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeList is the whole list of all Nodes which have been registered with master."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of nodes",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Node"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Node":              Node{},
		},
	}
}

func (_ NodeProxyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeProxyOptions is the query options to a Node's proxy call."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is the URL path to use for the current proxy request to node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NodeSelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms."
	schema.Properties = map[string]spec.Schema{
		"nodeSelectorTerms": {
			SchemaProps: spec.SchemaProps{
				Description: "Required. A list of node selector terms. The terms are ORed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.NodeSelectorTerm"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"nodeSelectorTerms"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NodeSelectorTerm": NodeSelectorTerm{},
		},
	}
}

func (_ NodeSelectorRequirement) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "The label key that the selector applies to.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"operator": {
			SchemaProps: spec.SchemaProps{
				Description: "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"values": {
			SchemaProps: spec.SchemaProps{
				Description: "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"key", "operator"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NodeSelectorTerm) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "A null or empty node selector term matches no objects."
	schema.Properties = map[string]spec.Schema{
		"matchExpressions": {
			SchemaProps: spec.SchemaProps{
				Description: "Required. A list of node selector requirements. The requirements are ANDed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.NodeSelectorRequirement"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"matchExpressions"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NodeSelectorRequirement": NodeSelectorRequirement{},
		},
	}
}

func (_ NodeSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeSpec describes the attributes that a node is created with."
	schema.Properties = map[string]spec.Schema{
		"podCIDR": {
			SchemaProps: spec.SchemaProps{
				Description: "PodCIDR represents the pod IP range assigned to the node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"externalID": {
			SchemaProps: spec.SchemaProps{
				Description: "External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"providerID": {
			SchemaProps: spec.SchemaProps{
				Description: "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"unschedulable": {
			SchemaProps: spec.SchemaProps{
				Description: "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\"`",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ NodeStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeStatus is information about the current status of a node."
	schema.Properties = map[string]spec.Schema{
		"capacity": {
			SchemaProps: spec.SchemaProps{
				Description: "Capacity represents the total resources of a node. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#capacity for more details.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"allocatable": {
			SchemaProps: spec.SchemaProps{
				Description: "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"phase": {
			SchemaProps: spec.SchemaProps{
				Description: "NodePhase is the recently observed lifecycle phase of the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-phase The field is never populated, and now is deprecated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"conditions": {
			SchemaProps: spec.SchemaProps{
				Description: "Conditions is an array of current observed node conditions. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-condition",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.NodeCondition"),
						},
					},
				},
			},
		},
		"addresses": {
			SchemaProps: spec.SchemaProps{
				Description: "List of addresses reachable to the node. Queried from cloud provider, if available. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-addresses",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.NodeAddress"),
						},
					},
				},
			},
		},
		"daemonEndpoints": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeDaemonEndpoints"),
			},
		},
		"nodeInfo": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeSystemInfo"),
			},
		},
		"images": {
			SchemaProps: spec.SchemaProps{
				Description: "List of container images on this node",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ContainerImage"),
						},
					},
				},
			},
		},
		"volumesInUse": {
			SchemaProps: spec.SchemaProps{
				Description: "List of attachable volumes in use (mounted) by the node.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"volumesAttached": {
			SchemaProps: spec.SchemaProps{
				Description: "List of volumes that are attached to the node.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.AttachedVolume"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity":      resource.Quantity{},
			"v1.AttachedVolume":      AttachedVolume{},
			"v1.ContainerImage":      ContainerImage{},
			"v1.NodeAddress":         NodeAddress{},
			"v1.NodeCondition":       NodeCondition{},
			"v1.NodeDaemonEndpoints": NodeDaemonEndpoints{},
			"v1.NodeSystemInfo":      NodeSystemInfo{},
		},
	}
}

func (_ NodeSystemInfo) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "NodeSystemInfo is a set of ids/uuids to uniquely identify the node."
	schema.Properties = map[string]spec.Schema{
		"machineID": {
			SchemaProps: spec.SchemaProps{
				Description: "Machine ID reported by the node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"systemUUID": {
			SchemaProps: spec.SchemaProps{
				Description: "System UUID reported by the node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"bootID": {
			SchemaProps: spec.SchemaProps{
				Description: "Boot ID reported by the node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"kernelVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"osImage": {
			SchemaProps: spec.SchemaProps{
				Description: "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"containerRuntimeVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"kubeletVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "Kubelet Version reported by the node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"kubeProxyVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "KubeProxy Version reported by the node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"operatingSystem": {
			SchemaProps: spec.SchemaProps{
				Description: "The Operating System reported by the node",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"architecture": {
			SchemaProps: spec.SchemaProps{
				Description: "The Architecture reported by the node",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"machineID", "systemUUID", "bootID", "kernelVersion", "osImage", "containerRuntimeVersion", "kubeletVersion", "kubeProxyVersion", "operatingSystem", "architecture"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ObjectFieldSelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ObjectFieldSelector selects an APIVersioned field of an object."
	schema.Properties = map[string]spec.Schema{
		"apiVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fieldPath": {
			SchemaProps: spec.SchemaProps{
				Description: "Path of the field to select in the specified API version.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"fieldPath"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ObjectMeta) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"generateName": {
			SchemaProps: spec.SchemaProps{
				Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"namespace": {
			SchemaProps: spec.SchemaProps{
				Description: "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"selfLink": {
			SchemaProps: spec.SchemaProps{
				Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"uid": {
			SchemaProps: spec.SchemaProps{
				Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"resourceVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"generation": {
			SchemaProps: spec.SchemaProps{
				Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"creationTimestamp": {
			SchemaProps: spec.SchemaProps{
				Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"deletionTimestamp": {
			SchemaProps: spec.SchemaProps{
				Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"deletionGracePeriodSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"labels": {
			SchemaProps: spec.SchemaProps{
				Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"annotations": {
			SchemaProps: spec.SchemaProps{
				Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://releases.k8s.io/HEAD/docs/user-guide/annotations.md",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"ownerReferences": {
			SchemaProps: spec.SchemaProps{
				Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.OwnerReference"),
						},
					},
				},
			},
		},
		"finalizers": {
			SchemaProps: spec.SchemaProps{
				Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"clusterName": {
			SchemaProps: spec.SchemaProps{
				Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.OwnerReference": OwnerReference{},
		},
	}
}

func (_ ObjectReference) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ObjectReference contains enough information to let you inspect or modify the referred object."
	schema.Properties = map[string]spec.Schema{
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"namespace": {
			SchemaProps: spec.SchemaProps{
				Description: "Namespace of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/namespaces.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"uid": {
			SchemaProps: spec.SchemaProps{
				Description: "UID of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"apiVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "API version of the referent.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"resourceVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fieldPath": {
			SchemaProps: spec.SchemaProps{
				Description: "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ OwnerReference) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field."
	schema.Properties = map[string]spec.Schema{
		"apiVersion": {
			SchemaProps: spec.SchemaProps{
				Description: "API version of the referent.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"kind": {
			SchemaProps: spec.SchemaProps{
				Description: "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"uid": {
			SchemaProps: spec.SchemaProps{
				Description: "UID of the referent. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#uids",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"controller": {
			SchemaProps: spec.SchemaProps{
				Description: "If true, this reference points to the managing controller.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"apiVersion", "kind", "name", "uid"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PersistentVolume) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolumeSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolumeStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":             ObjectMeta{},
			"v1.PersistentVolumeSpec":   PersistentVolumeSpec{},
			"v1.PersistentVolumeStatus": PersistentVolumeStatus{},
		},
	}
}

func (_ PersistentVolumeClaim) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeClaim is a user's request for and claim to a persistent volume"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolumeClaimSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolumeClaimStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                  ObjectMeta{},
			"v1.PersistentVolumeClaimSpec":   PersistentVolumeClaimSpec{},
			"v1.PersistentVolumeClaimStatus": PersistentVolumeClaimStatus{},
		},
	}
}

func (_ PersistentVolumeClaimList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeClaimList is a list of PersistentVolumeClaim items."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "A list of persistent volume claims. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolumeClaim"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":     unversioned.ListMeta{},
			"v1.PersistentVolumeClaim": PersistentVolumeClaim{},
		},
	}
}

func (_ PersistentVolumeClaimSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes"
	schema.Properties = map[string]spec.Schema{
		"accessModes": {
			SchemaProps: spec.SchemaProps{
				Description: "AccessModes contains the desired access modes the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"resources": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ResourceRequirements"),
			},
		},
		"volumeName": {
			SchemaProps: spec.SchemaProps{
				Description: "VolumeName is the binding reference to the PersistentVolume backing this claim.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.LabelSelector": unversioned.LabelSelector{},
			"v1.ResourceRequirements":   ResourceRequirements{},
		},
	}
}

func (_ PersistentVolumeClaimStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeClaimStatus is the current status of a persistent volume claim."
	schema.Properties = map[string]spec.Schema{
		"phase": {
			SchemaProps: spec.SchemaProps{
				Description: "Phase represents the current phase of PersistentVolumeClaim.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"accessModes": {
			SchemaProps: spec.SchemaProps{
				Description: "AccessModes contains the actual access modes the volume backing the PVC has. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"capacity": {
			SchemaProps: spec.SchemaProps{
				Description: "Represents the actual resources of the underlying volume.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ PersistentVolumeClaimVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system)."
	schema.Properties = map[string]spec.Schema{
		"claimName": {
			SchemaProps: spec.SchemaProps{
				Description: "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#persistentvolumeclaims",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Will force the ReadOnly setting in VolumeMounts. Default false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"claimName"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PersistentVolumeList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeList is a list of PersistentVolume items."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of persistent volumes. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolume"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.PersistentVolume":  PersistentVolume{},
		},
	}
}

func (_ PersistentVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set."
	schema.Properties = map[string]spec.Schema{
		"gcePersistentDisk": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.GCEPersistentDiskVolumeSource"),
			},
		},
		"awsElasticBlockStore": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.AWSElasticBlockStoreVolumeSource"),
			},
		},
		"hostPath": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.HostPathVolumeSource"),
			},
		},
		"glusterfs": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.GlusterfsVolumeSource"),
			},
		},
		"nfs": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NFSVolumeSource"),
			},
		},
		"rbd": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.RBDVolumeSource"),
			},
		},
		"iscsi": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ISCSIVolumeSource"),
			},
		},
		"cinder": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.CinderVolumeSource"),
			},
		},
		"cephfs": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.CephFSVolumeSource"),
			},
		},
		"fc": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.FCVolumeSource"),
			},
		},
		"flocker": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.FlockerVolumeSource"),
			},
		},
		"flexVolume": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.FlexVolumeSource"),
			},
		},
		"azureFile": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.AzureFileVolumeSource"),
			},
		},
		"vsphereVolume": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.VsphereVirtualDiskVolumeSource"),
			},
		},
		"quobyte": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.QuobyteVolumeSource"),
			},
		},
		"azureDisk": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.AzureDiskVolumeSource"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.AWSElasticBlockStoreVolumeSource": AWSElasticBlockStoreVolumeSource{},
			"v1.AzureDiskVolumeSource":            AzureDiskVolumeSource{},
			"v1.AzureFileVolumeSource":            AzureFileVolumeSource{},
			"v1.CephFSVolumeSource":               CephFSVolumeSource{},
			"v1.CinderVolumeSource":               CinderVolumeSource{},
			"v1.FCVolumeSource":                   FCVolumeSource{},
			"v1.FlexVolumeSource":                 FlexVolumeSource{},
			"v1.FlockerVolumeSource":              FlockerVolumeSource{},
			"v1.GCEPersistentDiskVolumeSource":    GCEPersistentDiskVolumeSource{},
			"v1.GlusterfsVolumeSource":            GlusterfsVolumeSource{},
			"v1.HostPathVolumeSource":             HostPathVolumeSource{},
			"v1.ISCSIVolumeSource":                ISCSIVolumeSource{},
			"v1.NFSVolumeSource":                  NFSVolumeSource{},
			"v1.QuobyteVolumeSource":              QuobyteVolumeSource{},
			"v1.RBDVolumeSource":                  RBDVolumeSource{},
			"v1.VsphereVirtualDiskVolumeSource":   VsphereVirtualDiskVolumeSource{},
		},
	}
}

func (_ PersistentVolumeSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeSpec is the specification of a persistent volume."
	schema.Properties = map[string]spec.Schema{
		"capacity": {
			SchemaProps: spec.SchemaProps{
				Description: "A description of the persistent volume's resources and capacity. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#capacity",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"accessModes": {
			SchemaProps: spec.SchemaProps{
				Description: "AccessModes contains all ways the volume can be mounted. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"claimRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectReference"),
			},
		},
		"persistentVolumeReclaimPolicy": {
			SchemaProps: spec.SchemaProps{
				Description: "What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recyling must be supported by the volume plugin underlying this persistent volume. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#recycling-policy",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity":  resource.Quantity{},
			"v1.ObjectReference": ObjectReference{},
		},
	}
}

func (_ PersistentVolumeStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PersistentVolumeStatus is the current status of a persistent volume."
	schema.Properties = map[string]spec.Schema{
		"phase": {
			SchemaProps: spec.SchemaProps{
				Description: "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#phase",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "A human-readable message indicating details about why the volume is in this state.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Pod) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": ObjectMeta{},
			"v1.PodSpec":    PodSpec{},
			"v1.PodStatus":  PodStatus{},
		},
	}
}

func (_ PodAffinity) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Pod affinity is a group of inter pod affinity scheduling rules."
	schema.Properties = map[string]spec.Schema{
		"requiredDuringSchedulingIgnoredDuringExecution": {
			SchemaProps: spec.SchemaProps{
				Description: "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PodAffinityTerm"),
						},
					},
				},
			},
		},
		"preferredDuringSchedulingIgnoredDuringExecution": {
			SchemaProps: spec.SchemaProps{
				Description: "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.WeightedPodAffinityTerm"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodAffinityTerm":         PodAffinityTerm{},
			"v1.WeightedPodAffinityTerm": WeightedPodAffinityTerm{},
		},
	}
}

func (_ PodAffinityTerm) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> tches that of any node on which a pod of the set of pods is running"
	schema.Properties = map[string]spec.Schema{
		"labelSelector": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.LabelSelector"),
			},
		},
		"namespaces": {
			SchemaProps: spec.SchemaProps{
				Description: "namespaces specifies which namespaces the labelSelector applies to (matches against); nil list means \"this pod's namespace,\" empty list means \"all namespaces\" The json tag here is not \"omitempty\" since we need to distinguish nil and empty. See https://golang.org/pkg/encoding/json/#Marshal for more details.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"topologyKey": {
			SchemaProps: spec.SchemaProps{
				Description: "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"namespaces"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.LabelSelector": unversioned.LabelSelector{},
		},
	}
}

func (_ PodAntiAffinity) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Pod anti affinity is a group of inter pod anti affinity scheduling rules."
	schema.Properties = map[string]spec.Schema{
		"requiredDuringSchedulingIgnoredDuringExecution": {
			SchemaProps: spec.SchemaProps{
				Description: "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PodAffinityTerm"),
						},
					},
				},
			},
		},
		"preferredDuringSchedulingIgnoredDuringExecution": {
			SchemaProps: spec.SchemaProps{
				Description: "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.WeightedPodAffinityTerm"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodAffinityTerm":         PodAffinityTerm{},
			"v1.WeightedPodAffinityTerm": WeightedPodAffinityTerm{},
		},
	}
}

func (_ PodAttachOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodAttachOptions is the query options to a Pod's remote attach call."
	schema.Properties = map[string]spec.Schema{
		"stdin": {
			SchemaProps: spec.SchemaProps{
				Description: "Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"stdout": {
			SchemaProps: spec.SchemaProps{
				Description: "Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"stderr": {
			SchemaProps: spec.SchemaProps{
				Description: "Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"tty": {
			SchemaProps: spec.SchemaProps{
				Description: "TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"container": {
			SchemaProps: spec.SchemaProps{
				Description: "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PodCondition) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodCondition contains details for the current condition of this pod."
	schema.Properties = map[string]spec.Schema{
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type is the type of the condition. Currently only Ready. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Description: "Status is the status of the condition. Can be True, False, Unknown. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"lastProbeTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Last time we probed the condition.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"lastTransitionTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Last time the condition transitioned from one status to another.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "Unique, one-word, CamelCase reason for the condition's last transition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Human-readable message indicating details about last transition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"type", "status"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PodExecOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodExecOptions is the query options to a Pod's remote exec call."
	schema.Properties = map[string]spec.Schema{
		"stdin": {
			SchemaProps: spec.SchemaProps{
				Description: "Redirect the standard input stream of the pod for this call. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"stdout": {
			SchemaProps: spec.SchemaProps{
				Description: "Redirect the standard output stream of the pod for this call. Defaults to true.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"stderr": {
			SchemaProps: spec.SchemaProps{
				Description: "Redirect the standard error stream of the pod for this call. Defaults to true.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"tty": {
			SchemaProps: spec.SchemaProps{
				Description: "TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"container": {
			SchemaProps: spec.SchemaProps{
				Description: "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"command": {
			SchemaProps: spec.SchemaProps{
				Description: "Command is the remote command to execute. argv array. Not executed within a shell.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"command"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PodList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodList is a list of Pods."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of pods. More info: http://releases.k8s.io/HEAD/docs/user-guide/pods.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Pod"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Pod":               Pod{},
		},
	}
}

func (_ PodLogOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodLogOptions is the query options for a Pod's logs REST call."
	schema.Properties = map[string]spec.Schema{
		"container": {
			SchemaProps: spec.SchemaProps{
				Description: "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"follow": {
			SchemaProps: spec.SchemaProps{
				Description: "Follow the log stream of the pod. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"previous": {
			SchemaProps: spec.SchemaProps{
				Description: "Return previous terminated container logs. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"sinceSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"sinceTime": {
			SchemaProps: spec.SchemaProps{
				Description: "An RFC3339 timestamp from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"timestamps": {
			SchemaProps: spec.SchemaProps{
				Description: "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"tailLines": {
			SchemaProps: spec.SchemaProps{
				Description: "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"limitBytes": {
			SchemaProps: spec.SchemaProps{
				Description: "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PodProxyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodProxyOptions is the query options to a Pod's proxy call."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is the URL path to use for the current proxy request to pod.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PodSecurityContext) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext."
	schema.Properties = map[string]spec.Schema{
		"seLinuxOptions": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.SELinuxOptions"),
			},
		},
		"runAsUser": {
			SchemaProps: spec.SchemaProps{
				Description: "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"runAsNonRoot": {
			SchemaProps: spec.SchemaProps{
				Description: "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"supplementalGroups": {
			SchemaProps: spec.SchemaProps{
				Description: "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
				},
			},
		},
		"fsGroup": {
			SchemaProps: spec.SchemaProps{
				Description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.SELinuxOptions": SELinuxOptions{},
		},
	}
}

func (_ PodSignature) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Describes the class of pods that should avoid this node. Exactly one field should be set."
	schema.Properties = map[string]spec.Schema{
		"podController": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.OwnerReference"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.OwnerReference": OwnerReference{},
		},
	}
}

func (_ PodSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodSpec is a description of a pod."
	schema.Properties = map[string]spec.Schema{
		"volumes": {
			SchemaProps: spec.SchemaProps{
				Description: "List of volumes that can be mounted by containers belonging to the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Volume"),
						},
					},
				},
			},
		},
		"containers": {
			SchemaProps: spec.SchemaProps{
				Description: "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/containers.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Container"),
						},
					},
				},
			},
		},
		"restartPolicy": {
			SchemaProps: spec.SchemaProps{
				Description: "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#restartpolicy",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"terminationGracePeriodSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"activeDeadlineSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"dnsPolicy": {
			SchemaProps: spec.SchemaProps{
				Description: "Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\".",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"nodeSelector": {
			SchemaProps: spec.SchemaProps{
				Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://releases.k8s.io/HEAD/docs/user-guide/node-selection/README.md",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"serviceAccountName": {
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"serviceAccount": {
			SchemaProps: spec.SchemaProps{
				Description: "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"nodeName": {
			SchemaProps: spec.SchemaProps{
				Description: "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"hostNetwork": {
			SchemaProps: spec.SchemaProps{
				Description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"hostPID": {
			SchemaProps: spec.SchemaProps{
				Description: "Use the host's pid namespace. Optional: Default to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"hostIPC": {
			SchemaProps: spec.SchemaProps{
				Description: "Use the host's ipc namespace. Optional: Default to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"securityContext": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodSecurityContext"),
			},
		},
		"imagePullSecrets": {
			SchemaProps: spec.SchemaProps{
				Description: "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://releases.k8s.io/HEAD/docs/user-guide/images.md#specifying-imagepullsecrets-on-a-pod",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		"hostname": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"subdomain": {
			SchemaProps: spec.SchemaProps{
				Description: "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"containers"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.Container":            Container{},
			"v1.LocalObjectReference": LocalObjectReference{},
			"v1.PodSecurityContext":   PodSecurityContext{},
			"v1.Volume":               Volume{},
		},
	}
}

func (_ PodStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodStatus represents information about the status of a pod. Status may trail the actual state of a system."
	schema.Properties = map[string]spec.Schema{
		"phase": {
			SchemaProps: spec.SchemaProps{
				Description: "Current condition of the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-phase",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"conditions": {
			SchemaProps: spec.SchemaProps{
				Description: "Current service state of pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#pod-conditions",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PodCondition"),
						},
					},
				},
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "A human readable message indicating details about why the pod is in this condition.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"hostIP": {
			SchemaProps: spec.SchemaProps{
				Description: "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"podIP": {
			SchemaProps: spec.SchemaProps{
				Description: "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"startTime": {
			SchemaProps: spec.SchemaProps{
				Description: "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"containerStatuses": {
			SchemaProps: spec.SchemaProps{
				Description: "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-statuses",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ContainerStatus"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ContainerStatus": ContainerStatus{},
			"v1.PodCondition":    PodCondition{},
		},
	}
}

func (_ PodStatusResult) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodStatusResult is a wrapper for PodStatus returned by kubelet that can be encode/decoded"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": ObjectMeta{},
			"v1.PodStatus":  PodStatus{},
		},
	}
}

func (_ PodTemplate) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodTemplate describes a template for creating copies of a predefined pod."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodTemplateSpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":      ObjectMeta{},
			"v1.PodTemplateSpec": PodTemplateSpec{},
		},
	}
}

func (_ PodTemplateList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodTemplateList is a list of PodTemplates."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of pod templates",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.PodTemplate"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.PodTemplate":       PodTemplate{},
		},
	}
}

func (_ PodTemplateSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "PodTemplateSpec describes the data a pod should have when created from a template"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodSpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": ObjectMeta{},
			"v1.PodSpec":    PodSpec{},
		},
	}
}

func (_ Preconditions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out."
	schema.Properties = map[string]spec.Schema{
		"uid": {
			SchemaProps: spec.SchemaProps{
				Description: "Specifies the target UID.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ PreferAvoidPodsEntry) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Describes a class of pods that should avoid this node."
	schema.Properties = map[string]spec.Schema{
		"podSignature": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodSignature"),
			},
		},
		"evictionTime": {
			SchemaProps: spec.SchemaProps{
				Description: "Time at which this entry was added to the list.",
				Type:        []string{"string"},
				Format:      "date-time",
			},
		},
		"reason": {
			SchemaProps: spec.SchemaProps{
				Description: "(brief) reason why this entry was added to the list.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"message": {
			SchemaProps: spec.SchemaProps{
				Description: "Human readable message indicating why this entry was added to the list.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"podSignature"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodSignature": PodSignature{},
		},
	}
}

func (_ PreferredSchedulingTerm) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op)."
	schema.Properties = map[string]spec.Schema{
		"weight": {
			SchemaProps: spec.SchemaProps{
				Description: "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"preference": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NodeSelectorTerm"),
			},
		},
	}
	schema.Required = []string{"weight", "preference"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.NodeSelectorTerm": NodeSelectorTerm{},
		},
	}
}

func (_ Probe) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic."
	schema.Properties = map[string]spec.Schema{
		"initialDelaySeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"timeoutSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"periodSeconds": {
			SchemaProps: spec.SchemaProps{
				Description: "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"successThreshold": {
			SchemaProps: spec.SchemaProps{
				Description: "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"failureThreshold": {
			SchemaProps: spec.SchemaProps{
				Description: "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ QuobyteVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"registry": {
			SchemaProps: spec.SchemaProps{
				Description: "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"volume": {
			SchemaProps: spec.SchemaProps{
				Description: "Volume is a string that references an already created Quobyte volume by name.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"user": {
			SchemaProps: spec.SchemaProps{
				Description: "User to map volume access to Defaults to serivceaccount user",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"group": {
			SchemaProps: spec.SchemaProps{
				Description: "Group to map volume access to Default is no group",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"registry", "volume"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ RBDVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"monitors": {
			SchemaProps: spec.SchemaProps{
				Description: "A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"image": {
			SchemaProps: spec.SchemaProps{
				Description: "The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#rbd",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"pool": {
			SchemaProps: spec.SchemaProps{
				Description: "The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"user": {
			SchemaProps: spec.SchemaProps{
				Description: "The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"keyring": {
			SchemaProps: spec.SchemaProps{
				Description: "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"secretRef": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.LocalObjectReference"),
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"monitors", "image"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LocalObjectReference": LocalObjectReference{},
		},
	}
}

func (_ RangeAllocation) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "RangeAllocation is not a public type."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"range": {
			SchemaProps: spec.SchemaProps{
				Description: "Range is string that identifies the range represented by 'data'.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"data": {
			SchemaProps: spec.SchemaProps{
				Description: "Data is a bit array containing all allocated addresses in the previous segment.",
				Type:        []string{"string"},
				Format:      "byte",
			},
		},
	}
	schema.Required = []string{"range", "data"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": ObjectMeta{},
		},
	}
}

func (_ ReplicationController) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicationController represents the configuration of a replication controller."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ReplicationControllerSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ReplicationControllerStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":                  ObjectMeta{},
			"v1.ReplicationControllerSpec":   ReplicationControllerSpec{},
			"v1.ReplicationControllerStatus": ReplicationControllerStatus{},
		},
	}
}

func (_ ReplicationControllerList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicationControllerList is a collection of replication controllers."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of replication controllers. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ReplicationController"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta":     unversioned.ListMeta{},
			"v1.ReplicationController": ReplicationController{},
		},
	}
}

func (_ ReplicationControllerSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicationControllerSpec is the specification of a replication controller."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Description: "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"template": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodTemplateSpec"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodTemplateSpec": PodTemplateSpec{},
		},
	}
}

func (_ ReplicationControllerStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ReplicationControllerStatus represents the current status of a replication controller."
	schema.Properties = map[string]spec.Schema{
		"replicas": {
			SchemaProps: spec.SchemaProps{
				Description: "Replicas is the most recently oberved number of replicas. More info: http://releases.k8s.io/HEAD/docs/user-guide/replication-controller.md#what-is-a-replication-controller",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"fullyLabeledReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of pods that have labels matching the labels of the pod template of the replication controller.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"readyReplicas": {
			SchemaProps: spec.SchemaProps{
				Description: "The number of ready replicas for this replication controller.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"observedGeneration": {
			SchemaProps: spec.SchemaProps{
				Description: "ObservedGeneration reflects the generation of the most recently observed replication controller.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
	}
	schema.Required = []string{"replicas"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ResourceFieldSelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceFieldSelector represents container resources (cpu, memory) and their output format"
	schema.Properties = map[string]spec.Schema{
		"containerName": {
			SchemaProps: spec.SchemaProps{
				Description: "Container name: required for volumes, optional for env vars",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"resource": {
			SchemaProps: spec.SchemaProps{
				Description: "Required: resource to select",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"divisor": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
			},
		},
	}
	schema.Required = []string{"resource"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ ResourceQuota) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceQuota sets aggregate quota restrictions enforced per namespace"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ResourceQuotaSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ResourceQuotaStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":          ObjectMeta{},
			"v1.ResourceQuotaSpec":   ResourceQuotaSpec{},
			"v1.ResourceQuotaStatus": ResourceQuotaStatus{},
		},
	}
}

func (_ ResourceQuotaList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceQuotaList is a list of ResourceQuota items."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of ResourceQuota objects. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ResourceQuota"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.ResourceQuota":     ResourceQuota{},
		},
	}
}

func (_ ResourceQuotaSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceQuotaSpec defines the desired hard limits to enforce for Quota."
	schema.Properties = map[string]spec.Schema{
		"hard": {
			SchemaProps: spec.SchemaProps{
				Description: "Hard is the set of desired hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"scopes": {
			SchemaProps: spec.SchemaProps{
				Description: "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ ResourceQuotaStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceQuotaStatus defines the enforced hard limits and observed use."
	schema.Properties = map[string]spec.Schema{
		"hard": {
			SchemaProps: spec.SchemaProps{
				Description: "Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"used": {
			SchemaProps: spec.SchemaProps{
				Description: "Used is the current observed total usage of the resource in the namespace.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ ResourceRequirements) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ResourceRequirements describes the compute resource requirements."
	schema.Properties = map[string]spec.Schema{
		"limits": {
			SchemaProps: spec.SchemaProps{
				Description: "Limits describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
		"requests": {
			SchemaProps: spec.SchemaProps{
				Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/resource.Quantity"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"resource.Quantity": resource.Quantity{},
		},
	}
}

func (_ SELinuxOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SELinuxOptions are the labels to be applied to the container"
	schema.Properties = map[string]spec.Schema{
		"user": {
			SchemaProps: spec.SchemaProps{
				Description: "User is a SELinux user label that applies to the container.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"role": {
			SchemaProps: spec.SchemaProps{
				Description: "Role is a SELinux role label that applies to the container.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Type is a SELinux type label that applies to the container.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"level": {
			SchemaProps: spec.SchemaProps{
				Description: "Level is SELinux level label that applies to the container.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Secret) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"data": {
			SchemaProps: spec.SchemaProps{
				Description: "Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "byte",
									},
								},
							},
						},
					},
				},
			},
		},
		"stringData": {
			SchemaProps: spec.SchemaProps{
				Description: "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "Used to facilitate programmatic handling of secret data.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta": ObjectMeta{},
		},
	}
}

func (_ SecretKeySelector) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SecretKeySelector selects a key of a Secret."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "The key of the secret to select from.  Must be a valid secret key.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"key"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ SecretList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SecretList is a list of Secret."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "Items is a list of secret objects. More info: http://releases.k8s.io/HEAD/docs/user-guide/secrets.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Secret"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Secret":            Secret{},
		},
	}
}

func (_ SecretVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling."
	schema.Properties = map[string]spec.Schema{
		"secretName": {
			SchemaProps: spec.SchemaProps{
				Description: "Name of the secret in the pod's namespace to use. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#secrets",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.KeyToPath"),
						},
					},
				},
			},
		},
		"defaultMode": {
			SchemaProps: spec.SchemaProps{
				Description: "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.KeyToPath": KeyToPath{},
		},
	}
}

func (_ SecurityContext) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence."
	schema.Properties = map[string]spec.Schema{
		"capabilities": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.Capabilities"),
			},
		},
		"privileged": {
			SchemaProps: spec.SchemaProps{
				Description: "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"seLinuxOptions": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.SELinuxOptions"),
			},
		},
		"runAsUser": {
			SchemaProps: spec.SchemaProps{
				Description: "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
				Type:        []string{"integer"},
				Format:      "int64",
			},
		},
		"runAsNonRoot": {
			SchemaProps: spec.SchemaProps{
				Description: "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"readOnlyRootFilesystem": {
			SchemaProps: spec.SchemaProps{
				Description: "Whether this container has a read-only root filesystem. Default is false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.Capabilities":   Capabilities{},
			"v1.SELinuxOptions": SELinuxOptions{},
		},
	}
}

func (_ SerializedReference) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "SerializedReference is a reference to serialized object."
	schema.Properties = map[string]spec.Schema{
		"reference": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectReference"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectReference": ObjectReference{},
		},
	}
}

func (_ Service) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"spec": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ServiceSpec"),
			},
		},
		"status": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ServiceStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ObjectMeta":    ObjectMeta{},
			"v1.ServiceSpec":   ServiceSpec{},
			"v1.ServiceStatus": ServiceStatus{},
		},
	}
}

func (_ ServiceAccount) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ObjectMeta"),
			},
		},
		"secrets": {
			SchemaProps: spec.SchemaProps{
				Description: "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: http://releases.k8s.io/HEAD/docs/user-guide/secrets.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ObjectReference"),
						},
					},
				},
			},
		},
		"imagePullSecrets": {
			SchemaProps: spec.SchemaProps{
				Description: "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: http://releases.k8s.io/HEAD/docs/user-guide/secrets.md#manually-specifying-an-imagepullsecret",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LocalObjectReference": LocalObjectReference{},
			"v1.ObjectMeta":           ObjectMeta{},
			"v1.ObjectReference":      ObjectReference{},
		},
	}
}

func (_ ServiceAccountList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServiceAccountList is a list of ServiceAccount objects"
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of ServiceAccounts. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md#service-accounts",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ServiceAccount"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.ServiceAccount":    ServiceAccount{},
		},
	}
}

func (_ ServiceList) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServiceList holds a list of services."
	schema.Properties = map[string]spec.Schema{
		"metadata": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/unversioned.ListMeta"),
			},
		},
		"items": {
			SchemaProps: spec.SchemaProps{
				Description: "List of services",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.Service"),
						},
					},
				},
			},
		},
	}
	schema.Required = []string{"items"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"unversioned.ListMeta": unversioned.ListMeta{},
			"v1.Service":           Service{},
		},
	}
}

func (_ ServicePort) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServicePort contains information on service's port."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"protocol": {
			SchemaProps: spec.SchemaProps{
				Description: "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"port": {
			SchemaProps: spec.SchemaProps{
				Description: "The port that will be exposed by this service.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"targetPort": {
			SchemaProps: spec.SchemaProps{
				Description: "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#defining-a-service",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
		"nodePort": {
			SchemaProps: spec.SchemaProps{
				Description: "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#type--nodeport",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
	}
	schema.Required = []string{"port"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ServiceProxyOptions) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServiceProxyOptions is the query options to a Service's proxy call."
	schema.Properties = map[string]spec.Schema{
		"path": {
			SchemaProps: spec.SchemaProps{
				Description: "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ ServiceSpec) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServiceSpec describes the attributes that a user creates on a service."
	schema.Properties = map[string]spec.Schema{
		"ports": {
			SchemaProps: spec.SchemaProps{
				Description: "The list of ports that are exposed by this service. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Ref: spec.MustCreateRef("#/definitions/v1.ServicePort"),
						},
					},
				},
			},
		},
		"selector": {
			SchemaProps: spec.SchemaProps{
				Description: "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#overview",
				Type:        []string{"object"},
				AdditionalProperties: &spec.SchemaOrBool{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"clusterIP": {
			SchemaProps: spec.SchemaProps{
				Description: "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"type": {
			SchemaProps: spec.SchemaProps{
				Description: "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#overview",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"externalIPs": {
			SchemaProps: spec.SchemaProps{
				Description: "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"deprecatedPublicIPs": {
			SchemaProps: spec.SchemaProps{
				Description: "deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used.",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"sessionAffinity": {
			SchemaProps: spec.SchemaProps{
				Description: "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"loadBalancerIP": {
			SchemaProps: spec.SchemaProps{
				Description: "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"loadBalancerSourceRanges": {
			SchemaProps: spec.SchemaProps{
				Description: "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: http://releases.k8s.io/HEAD/docs/user-guide/services-firewalls.md",
				Type:        []string{"array"},
				Items: &spec.SchemaOrArray{
					Schema: &spec.Schema{
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		"externalName": {
			SchemaProps: spec.SchemaProps{
				Description: "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"ports"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.ServicePort": ServicePort{},
		},
	}
}

func (_ ServiceStatus) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "ServiceStatus represents the current status of a service."
	schema.Properties = map[string]spec.Schema{
		"loadBalancer": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.LoadBalancerStatus"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.LoadBalancerStatus": LoadBalancerStatus{},
		},
	}
}

func (_ TCPSocketAction) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "TCPSocketAction describes an action based on opening a socket"
	schema.Properties = map[string]spec.Schema{
		"port": {
			SchemaProps: spec.SchemaProps{
				Description: "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
				Type:        []string{"string"},
				Format:      "int-or-string",
			},
		},
	}
	schema.Required = []string{"port"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Taint) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "The node this Taint is attached to has the effect \"effect\" on any pod that that does not tolerate the Taint."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "Required. The taint key to be applied to a node.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Description: "Required. The taint value corresponding to the taint key.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"effect": {
			SchemaProps: spec.SchemaProps{
				Description: "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule and PreferNoSchedule.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"key", "effect"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Toleration) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>."
	schema.Properties = map[string]spec.Schema{
		"key": {
			SchemaProps: spec.SchemaProps{
				Description: "Required. Key is the taint key that the toleration applies to.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"operator": {
			SchemaProps: spec.SchemaProps{
				Description: "operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"value": {
			SchemaProps: spec.SchemaProps{
				Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"effect": {
			SchemaProps: spec.SchemaProps{
				Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and PreferNoSchedule.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ Volume) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Volume represents a named volume in a pod that may be accessed by any container in the pod."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://releases.k8s.io/HEAD/docs/user-guide/identifiers.md#names",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ VolumeMount) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "VolumeMount describes a mounting of a Volume within a container."
	schema.Properties = map[string]spec.Schema{
		"name": {
			SchemaProps: spec.SchemaProps{
				Description: "This must match the Name of a Volume.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"readOnly": {
			SchemaProps: spec.SchemaProps{
				Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
				Type:        []string{"boolean"},
				Format:      "",
			},
		},
		"mountPath": {
			SchemaProps: spec.SchemaProps{
				Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"subPath": {
			SchemaProps: spec.SchemaProps{
				Description: "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"name", "mountPath"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ VolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents the source of a volume to mount. Only one of its members may be specified."
	schema.Properties = map[string]spec.Schema{
		"hostPath": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.HostPathVolumeSource"),
			},
		},
		"emptyDir": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.EmptyDirVolumeSource"),
			},
		},
		"gcePersistentDisk": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.GCEPersistentDiskVolumeSource"),
			},
		},
		"awsElasticBlockStore": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.AWSElasticBlockStoreVolumeSource"),
			},
		},
		"gitRepo": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.GitRepoVolumeSource"),
			},
		},
		"secret": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.SecretVolumeSource"),
			},
		},
		"nfs": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.NFSVolumeSource"),
			},
		},
		"iscsi": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ISCSIVolumeSource"),
			},
		},
		"glusterfs": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.GlusterfsVolumeSource"),
			},
		},
		"persistentVolumeClaim": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PersistentVolumeClaimVolumeSource"),
			},
		},
		"rbd": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.RBDVolumeSource"),
			},
		},
		"flexVolume": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.FlexVolumeSource"),
			},
		},
		"cinder": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.CinderVolumeSource"),
			},
		},
		"cephfs": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.CephFSVolumeSource"),
			},
		},
		"flocker": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.FlockerVolumeSource"),
			},
		},
		"downwardAPI": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.DownwardAPIVolumeSource"),
			},
		},
		"fc": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.FCVolumeSource"),
			},
		},
		"azureFile": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.AzureFileVolumeSource"),
			},
		},
		"configMap": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.ConfigMapVolumeSource"),
			},
		},
		"vsphereVolume": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.VsphereVirtualDiskVolumeSource"),
			},
		},
		"quobyte": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.QuobyteVolumeSource"),
			},
		},
		"azureDisk": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.AzureDiskVolumeSource"),
			},
		},
	}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.AWSElasticBlockStoreVolumeSource":  AWSElasticBlockStoreVolumeSource{},
			"v1.AzureDiskVolumeSource":             AzureDiskVolumeSource{},
			"v1.AzureFileVolumeSource":             AzureFileVolumeSource{},
			"v1.CephFSVolumeSource":                CephFSVolumeSource{},
			"v1.CinderVolumeSource":                CinderVolumeSource{},
			"v1.ConfigMapVolumeSource":             ConfigMapVolumeSource{},
			"v1.DownwardAPIVolumeSource":           DownwardAPIVolumeSource{},
			"v1.EmptyDirVolumeSource":              EmptyDirVolumeSource{},
			"v1.FCVolumeSource":                    FCVolumeSource{},
			"v1.FlexVolumeSource":                  FlexVolumeSource{},
			"v1.FlockerVolumeSource":               FlockerVolumeSource{},
			"v1.GCEPersistentDiskVolumeSource":     GCEPersistentDiskVolumeSource{},
			"v1.GitRepoVolumeSource":               GitRepoVolumeSource{},
			"v1.GlusterfsVolumeSource":             GlusterfsVolumeSource{},
			"v1.HostPathVolumeSource":              HostPathVolumeSource{},
			"v1.ISCSIVolumeSource":                 ISCSIVolumeSource{},
			"v1.NFSVolumeSource":                   NFSVolumeSource{},
			"v1.PersistentVolumeClaimVolumeSource": PersistentVolumeClaimVolumeSource{},
			"v1.QuobyteVolumeSource":               QuobyteVolumeSource{},
			"v1.RBDVolumeSource":                   RBDVolumeSource{},
			"v1.SecretVolumeSource":                SecretVolumeSource{},
			"v1.VsphereVirtualDiskVolumeSource":    VsphereVirtualDiskVolumeSource{},
		},
	}
}

func (_ VsphereVirtualDiskVolumeSource) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "Represents a vSphere volume resource."
	schema.Properties = map[string]spec.Schema{
		"volumePath": {
			SchemaProps: spec.SchemaProps{
				Description: "Path that identifies vSphere volume vmdk",
				Type:        []string{"string"},
				Format:      "",
			},
		},
		"fsType": {
			SchemaProps: spec.SchemaProps{
				Description: "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
				Type:        []string{"string"},
				Format:      "",
			},
		},
	}
	schema.Required = []string{"volumePath"}
	return openapi.OpenAPIType{
		Schema:       &schema,
		Dependencies: map[string]interface{}{},
	}
}

func (_ WeightedPodAffinityTerm) OpenAPI() openapi.OpenAPIType {
	schema := spec.Schema{}
	schema.Description = "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)"
	schema.Properties = map[string]spec.Schema{
		"weight": {
			SchemaProps: spec.SchemaProps{
				Description: "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
				Type:        []string{"integer"},
				Format:      "int32",
			},
		},
		"podAffinityTerm": {
			SchemaProps: spec.SchemaProps{
				Ref: spec.MustCreateRef("#/definitions/v1.PodAffinityTerm"),
			},
		},
	}
	schema.Required = []string{"weight", "podAffinityTerm"}
	return openapi.OpenAPIType{
		Schema: &schema,
		Dependencies: map[string]interface{}{
			"v1.PodAffinityTerm": PodAffinityTerm{},
		},
	}
}
